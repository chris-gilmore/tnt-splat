// ===========================================================================
// .text
// ===========================================================================

// - {start: 0x001050, type:   c, vram: 0x8003ADD0, name: newtetris/001050}
createSuperThread                             = 0x8003ADD0; // type:func  note calls osContInit

FUN_001050_checkEepromSize_and_AllocHeap      = 0x8003AF0C; // type:func  note allocs 0x200 for 4k eeprom or 0x800 for 8k bit eeprom
FUN_001050_eepromWrite                        = 0x8003B0A8; // type:func  note calls osSendMesg
FUN_001050_eepromRead                         = 0x8003B22C; // type:func  note calls osSendMesg

FUN_001500_motorInit                          = 0x8003B29C; // type:func  note for all controllers
FUN_001050_8003b3e4_motor_sendrecvmsg_3       = 0x8003B3E4; // type:func  note calls osSendMesg, osRecvMesg
FUN_001050_8003b468_motor_sendmsg_0           = 0x8003B468; // type:func  note calls osSendMesg
FUN_001050_8003b4d4_motor_sendmsg_1           = 0x8003B4D4; // type:func  note calls osSendMesg
FUN_001050_8003b544_motor_sendmsg_2           = 0x8003B544; // type:func  note calls osSendMesg

FUN_001050_8003b5d0_controller_sendrecvmsg    = 0x8003B5D0; // type:func  note calls osSendMesg, osRecvMesg
FUN_001050_getControllerType                  = 0x8003B63C; // type:func unused  note controller, OSContStatus, type
FUN_001050_getControllerStatus                = 0x8003B654; // type:func  note controller, OSContStatus, status
FUN_001050_getControllerErrNo                 = 0x8003B66C; // type:func  note controller, OSContStatus, errno

FUN_001050_cpakInit                           = 0x8003B684; // type:func  note calls osSendMesg 0, osRecvMesg 
FUN_001050_cpakRead                           = 0x8003B6E8; // type:func  note calls osSendMesg 1, osRecvMesg
FUN_001050_cpakWrite                          = 0x8003B7A8; // type:func  note calls osSendMesg 2, osRecvMesg
FUN_001050_cpakAllocFile                      = 0x8003B868; // type:func  note calls osSendMesg 3, osRecvMesg
FUN_001050_cpakFindFile                       = 0x8003B8F4; // type:func  note calls osSendMesg 4, osRecvMesg
FUN_001050_cpakDeleteFile                     = 0x8003B980; // type:func  note calls osSendMesg 5, osRecvMesg
FUN_001050_cpakNumFiles                       = 0x8003BA0C; // type:func  note calls osSendMesg 6, osRecvMesg
FUN_001050_cpakFileState                      = 0x8003BA84; // type:func  note calls osSendMesg 7, osRecvMesg
FUN_001050_cpakRepairId                       = 0x8003BB24; // type:func  note calls osSendMesg 8, osRecvMesg
FUN_001050_cpakFreeBlocks                     = 0x8003BBB0; // type:func  note calls osSendMesg,9 osRecvMesg

FUN_001050_gbpakInit                          = 0x8003BC3C; // type:func  note calls osSendMesg 0, osRecvMesg
FUN_001050_gbpakReadId                        = 0x8003BCB0; // type:func  note calls osSendMesg 1, osRecvMesg
FUN_001050_gbpakReadWrite_a                   = 0x8003BD28; // type:func  note calls osSendMesg 2, osRecvMesg
FUN_001050_gbpakReadWrite_b                   = 0x8003BDA0; // type:func  note calls osSendMesg 4, osRecvMesg
FUN_001050_gbpakReadWrite_c                   = 0x8003BE18; // type:func  note calls osSendMesg 3, osRecvMesg
FUN_001050_gbpakReadWrite_d                   = 0x8003BED4; // type:func  note calls osSendMesg 3, osRecvMesg

// some kind of handler? for controller related stuff, including pak, motor, eeprom
FUN_001050_ControllerThread                   = 0x8003BF90; // type:func static  note 400 liner, Ave Caesar, Morituri te salutant
FUN_001050_Create_and_Start_ControllerThread  = 0x8003DB60; // type:func

//      - {start: 0x003E40, type:   c, vram: 0x8003DBC0, name: newtetris/003E40}
FUN_003E40_8003dbc0_twentyliner_nested_loops      = 0x8003DBC0; // type:func
FUN_003E40_8003dda8_twentyfiveliner_nested_loops  = 0x8003DDA8; // type:func
FUN_003E40_8003dfa0_sixliner_allocs_heap_x962     = 0x8003DFA0; // type:func  note allocs 2402 bytes on heap, init?
FUN_003E40_8003e004_threeliner_unallocs_heap      = 0x8003E004; // type:func  note some kind of Deinit?
FUN_003E40_8003e038_twentytwoliner_nested_loops   = 0x8003E038; // type:func

//      - {start: 0x004460, type: asm, vram: 0x8003E1E0, name: newtetris/aisquarelist}
aisquarelist_8003e1e0_sevenliner_loops_6t         = 0x8003E1E0; // type:func
aisquarelist_8003e22c_tenliner_loops_6t           = 0x8003E22C; // type:func
aisquarelist_8003e2c8_sevenliner                  = 0x8003E2C8; // type:func
aisquarelist_8003e34c_thirteenliner_loops_arg0_t  = 0x8003E34C; // type:func
aisquarelist_8003e458_thirteenliner_loops_7t      = 0x8003E458; // type:func
aisquarelist_8003e55c_eightliner_loops_arg0_t_1   = 0x8003E55C; // type:func
aisquarelist_8003e608_eightliner_loops_arg0_t_2   = 0x8003E608; // type:func
aisquarelist_8003e68c_hugeliner_many_loops        = 0x8003E68C; // type:func
aisquarelist_8003ed40_largeliner_many_loops       = 0x8003ED40; // type:func  note debug NOT ENOUGH AI SCORES

//      - {start: 0x005580, type: asm, vram: 0x8003F300, name: newtetris/005580}
FUN_005580_8003f300_fourteenliner_recursive               = 0x8003F300; // type:func  note calls itself
FUN_005580_8003f4f4_thirtyliner_nested_loops              = 0x8003F4F4; // type:func
FUN_005580_8003f720_fiveliner_sets_arg0_elems_to_args1to4 = 0x8003F720; // type:func
FUN_005580_8003f760_twoliner_calls_fun                    = 0x8003F760; // type:func
FUN_005580_8003f7ac_hugefun_currpiece_stuff_recursive     = 0x8003F7AC; // type:func  note case 0 to 4 interesting
FUN_005580_800400fc_largefun_more_currpiece_stuff         = 0x800400FC; // type:func  note way up the call chain its called from game.c FUN_80051cb0 

//      - {start: 0x006780, type: asm, vram: 0x80040500, name: newtetris/006780}
FUN_006780_80040500_twentyfiveliner_loops            = 0x80040500; // type:func

//      - {start: 0x006930, type: asm, vram: 0x800406B0, name: newtetris/006930}
FUN_006930_800406b0_fifteenliner_two_loops           = 0x800406B0; // type:func
FUN_006930_80040784_nested_loop_20t_inside_loop_10t  = 0x80040784; // type:func  note playfield 10 by 20 yo

//      - {start: 0x006B30, type: asm, vram: 0x800408B0, name: newtetris/006B30}
FUN_006B30_800408b0_fiveliner_loops_4t               = 0x800408B0; // type:func

//      - {start: 0x006BB0, type: asm, vram: 0x80040930, name: newtetris/006BB0}
FUN_006BB0_80040930_large_eightyliner                = 0x80040930; // type:func  note 
FUN_006BB0_80040f9c_twentyfiveliner_loops_200t       = 0x80040F9C; // type:func  note can exit loop earlier

//      - {start: 0x0073F0, type: asm, vram: 0x80041170, name: newtetris/0073F0}
FUN_0073F0_80041170_fifteenliner_pf_logic_cell       = 0x80041170; // type:func  note uses pf logic cell ptr

//      - {start: 0x0074E0, type: asm, vram: 0x80041260, name: newtetris/0074E0}
FUN_80041260_twoliner                  = 0x80041260; // type:func
FUN_8004129c_fourliner                 = 0x8004129C; // type:func
FUN_800412e0_fifteenliner_logic_cell   = 0x800412E0; // type:func
FUN_800413c0_twentyfive_liner          = 0x800413C0; // type:func
FUN_800416cc_fourliner                 = 0x800416CC; // type:func
FUN_8004172c_twentyliner               = 0x8004172C; // type:func
FUN_80041810_twentyliner               = 0x80041810; // type:func
FUN_8004191c_sixliner_loop_shift_right = 0x8004191C; // type:func
FUN_8004199c_twentyliner_loop          = 0x8004199C; // type:func
FUN_80041ab4_tenliner_loop             = 0x80041AB4; // type:func
check_square_completion                = 0x80041B48; // type:func note something to do with checking for square completion. causes blinking of ghost piece?
FUN_80041da0_threeliner                = 0x80041DA0; // type:func

//      - {start: 0x008050, type: asm, vram: 0x80041DD0, name: newtetris/008050}
aiplayer_80041dd0_alloc_heap_4_and_x640     = 0x80041DD0; // type:func note calls n64HeapAlloc(4) and (0x640) = 1600 interesting pointer DAT_800e1f40
aiplayer_80041e24_maybe_calls_unalloc_heap  = 0x80041E24; // type:func note looks like unallocs heap for DAT_800e1f40, is FUN_8007e328 the unalloc_help function? FUN_8007e328 is called 132 times in the code
aiplayer_80041e88_loops_200_times           = 0x80041E88; // type:func note initializes the heap block pointed to by DAT_800e1f40, 200 times 8 = 1600
aiplayer_80041ef0_twentyliner               = 0x80041EF0; // type:func
aiplayer_80041fcc_twentyliner_case4         = 0x80041FCC; // type:func
aiplayer_800420d8_fifteenliner              = 0x800420D8; // type:func
aiplayer_80042184_fifteenliner_loop         = 0x80042184; // type:func
aiplayer_800422f4_threeliner                = 0x800422F4; // type:func
aiplayer_80042368_threeliner                = 0x80042368; // type:func
aiplayer_800423f0_uses_dat_800e1f40_ptr     = 0x800423F0; // type:func note medium sized function with loop
aiplayer_80042738_passes_dat_800e1f40_ptr   = 0x80042738; // type:func
aiplayer_800427b8_passes_dat_800e1f40_ptr   = 0x800427B8; // type:func

//      - {start: 0x008A80, type: asm, vram: 0x80042800, name: newtetris/aiplayer}
aiplayer_gameinit_related                   = 0x80042800; // type:func note medium sized function allocs 0x47 from heap
aiplayer_80042b3c_calls_heap_unalloc        = 0x80042B3C; // type:func note unallocs the 0x47 from above
aiplayer_80042b88_largefunction             = 0x80042B88; // type:func
aiplayer_8004311c_largefunction             = 0x8004311C; // type:func note something with player in game stats
aiplayer_8004370c_threeliner                = 0x8004370C; // type:func
aiplayer_8004376c_fiveliner                 = 0x8004376C; // type:func note something with player in game stats

//      - {start: 0x009A90, type: asm, vram: 0x80043810, name: newtetris/009A90}
wonders1_80043810_eightliner            = 0x80043810; // type:func
wonders1_800438a8_mediumliner_loop      = 0x800438A8; // type:func
wonders1_80043c7c_thirtyliner_loop      = 0x80043C7C; // type:func
wonders1_80043ed8_thirtyliner_loop      = 0x80043ED8; // type:func
wonders1_8004411c_tenliner_loop         = 0x8004411C; // type:func
wonders1_80044218_tenliner_loop         = 0x80044218; // type:func
wonders1_checks_num_wonders_completed_q = 0x800442F8; // type:func note appears to check the number of completed wonders that may be stored in some global var
wonders1_80044424_threeliner            = 0x80044424; // type:func
wonders1_80044464_threeliner            = 0x80044464; // type:func
wonders1_case6_calls_music_magic        = 0x800444A4; // type:func
wonders1_800445dc_calls_4_funcs         = 0x800445DC; // type:func
wonders1_80044628_eightliner            = 0x80044628; // type:func
wonders1_800446ac_eightliner            = 0x800446AC; // type:func
wonders1_hall_or_exit                   = 0x80044748; // type:func note medium sized function
wonders1_display_complete_message       = 0x80044ED0; // type:func
wonders1_finale_or_hall                 = 0x80045190; // type:func
wonders1_800455bc_inc_won_compl_q       = 0x800455BC; // type:func note if something > 7 then + 1 else reset to 1, maybe its increment the num of completed wonders?
// note whats up with 0x42b40000, i see this passed as single arg to various functions
wonders1_something_hall_or_exit_case    = 0x80045968; // type:func
wonders1_anim_related                   = 0x80045BDC; // type:func
wonders1_calls_music_400x300_magic      = 0x80045C9C; // type:func

//      - {start: 0x00C0D0, type: asm, vram: 0x80045E50, name: newtetris/00C0D0}
wonders2_80045e50_sets_num_won_compl_q  = 0x80045E50; // type:func note DAT_800cf840 is boolean, true if all wonders completed, hmm maybe not, check again
wonders2_80045fdc_sets_num_won_compl_q  = 0x80045FDC; // type:func note how is this diff from above func
wonders2_8004619c_sixliner_crazy_if     = 0x8004619C; // type:func
wonders2_divide_by_seven                = 0x80046218; // type:func note yup thats all this function does, divides the single param by 7 and returns the result as int
wonders2_8004624c_mult_7_add_6_etc      = 0x8004624C; // type:func note uh ok what
wonders2_80046280_tenliner_trap         = 0x80046280; // type:func
wonders2_80046388_fiveliner             = 0x80046388; // type:func note subtract if non-neg else set to zero

//      - {start: 0x00C680, type: asm, vram: 0x80046400, name: newtetris/00C680}
wonders3_80046400_twentyliner            = 0x80046400; // type:func note calls that div by 7 function, looks at num wonders complete etc
wonders3_80046610_fifteenliner           = 0x80046610; // type:func
wonders3_80046798_threeliner             = 0x80046798; // type:func
wonders3_800467f8_threeliner             = 0x800467F8; // type:func
wonders3_init_tuples                     = 0x80046840; // type:func
wonders3_switch_0to7_6and7are_same       = 0x80046A34; // type:func
wonders3_display_wonders_hall_text       = 0x80046B28; // type:func
wonders3_related                         = 0x80047014; // type:func
wonders3_no_idea_menu_img_button         = 0x80047064; // type:func
wonders3_switch_0to3_2and3are_same       = 0x800471F8; // type:func
wonders3_wonder_viewer                   = 0x800472F0; // type:func
wonders3_8004745c_medium_liner_has_audio = 0x8004745C; // type:func note medium sized
wonders3_800476f0_thirtyliner            = 0x800476F0; // type:func
wonders3_display_contributors            = 0x800478C0; // type:func
wonders3_display_contribs_or_story       = 0x80047C58; // type:func

//      - {start: 0x00E2A0, type: asm, vram: 0x80048020, name: newtetris/00E2A0}
FUN_80048020_eightliner                  = 0x80048020; // type:func
func_800480D8_nevercalled                = 0x800480D8; // type:func
FUN_800480E0_threeliner_glist            = 0x800480E0; // type:func note what is glist?
FUN_80048150_threeliner_vlist            = 0x80048150; // type:func note what is vlist?

//      - {start: 0x00E440, type:   c, vram: 0x800481C0, name: newtetris/00E440}
FUN_800481C0_allocs_heap                 = 0x800481C0; // type:func note never called?
FUN_8004831C_allocs_heap                 = 0x8004831C; // type:func note never called?
FUN_800483E8_allocs_heap                 = 0x800483E8; // type:func note never called?
inits_bunch_of_stuff_q_allocs_heap       = 0x800484B4; // type:func note sets lots of pointers
FUN_80048934_inits_struct_q              = 0x80048934; // type:func note inits some struct or array
FUN_80048A6C_inits_struct_q              = 0x80048A6C; // type:func note inits some struct or array
has_rounds_and_floors_large_liner        = 0x80048B64; // type:func
has_rounds_and_floors_2_large_liner      = 0x800492FC; // type:func
four_arguments_get_debug_printed         = 0x80049AD0; // type:func

//      - {start: 0x00FEF0, type:   c, vram: 0x80049C70, name: newtetris/main}
main_infinite_loop_at_end              = 0x80049C70; // type:func static
boot                                   = 0x80049CE0; // type:func
idle                                   = 0x80049D78; // type:func static
main_infinite_loop_at_end_3            = 0x8004A0A0; // type:func static
main_maybe_audio_related               = 0x8004A280; // type:func static
main_8004A34C_threeliner               = 0x8004A34C; // type:func
main_another_but_diff_400x300          = 0x8004A3A4; // type:func static

//      - {start: 0x010820, type:   c, vram: 0x8004A5A0, name: newtetris/dbgprntrrl}
debug_print_reason_routine_linenum     = 0x8004A5A0; // type:func

//      - {start: 0x010870, type: asm, vram: 0x8004A5F0, name: newtetris/010870}
FUN_010870_interesting_stuff_large_liner    = 0x8004A5F0; // type:func
FUN_010870_8004abe8_fifteenliner_1          = 0x8004ABE8; // type:func note messes with D_800CFEA4 D_800CFEA8
FUN_010870_8004acb0_fifteenliner_2          = 0x8004ACB0; // type:func note messes with D_800CFEA4 D_800CFEA8
FUN_010870_OptionsDataMenu                  = 0x8004AD7C; // type:func note this is a super huge function (1000 lines?) with many switch cases lots of lines of code

//      - {start: 0x0167A0, type:   c, vram: 0x80050520, name: newtetris/setplayer}
Game_SetGlobalPointers                 = 0x80050520; // type:func
PlayerVars_SetGlobalPointers           = 0x8005061C; // type:func

//      - {start: 0x0168D0, type:   c, vram: 0x80050650, name: newtetris/ids}
Ids_Init                               = 0x80050650; // type:func
Ids_Deinit                             = 0x800506D0; // type:func
can_run_out_of_ids                     = 0x80050714; // type:func
FUN_800507e4_twoliner                  = 0x800507E4; // type:func static
FUN_80050800_oneliner                  = 0x80050800; // type:func
FUN_80050820_oneliner                  = 0x80050820; // type:func
FUN_80050840_fiveliner                 = 0x80050840; // type:func
FUN_800508a8_fiveliner                 = 0x800508A8; // type:func unused
FUN_800508ec_fifteen_liner_allocs_heap = 0x800508EC; // type:func

//      - {start: 0x016C40, type:   c, vram: 0x800509C0, name: newtetris/game}
setPlayerTopOutOrder                     = 0x800509C0; // type:func static
hasPlayerToppedOut                       = 0x80050A64; // type:func unused
Game_calls_SETGP_magic_7                 = 0x80050AC4; // type:func
Game_SetAlpha                            = 0x80050B54; // type:func static
getPlayerTopOutOrder                     = 0x80050CA8; // type:func static
//---------------
getMaxPlayerLines                        = 0x80050D08; // type:func static
getMinPlayerTime                         = 0x80050DB4; // type:func static
Game_isGameWinner                        = 0x80050E60; // type:func note returns 1 if player is winner else 0
//--------------
Game_countWinners                        = 0x8005102C; // type:func
Game_800510a4_eightliner                 = 0x800510A4; // type:func static
Game_80051104_sevenliner_num_players     = 0x80051104; // type:func static
Game_game_over_related                   = 0x80051164; // type:func static
// todo: name the local vars in this function:
// uint lineCount, undefined4 isGameOver, uint i, uint numPlayers, byte gameType
// gameType 0 == marathon, 1 == sprint, else == ultra
isGoalCompleted                          = 0x800511EC; // type:func static
Game_80051320_fiveliner                  = 0x80051320; // type:func static  note if one player then else something
Game_800513bc_tenliner_num_players       = 0x800513BC; // type:func static
Game_QueryGameOver                       = 0x80051464; // type:func static
Game_800515f8_twoliner                   = 0x800515F8; // type:func static
Game_80051618_twentyliner                = 0x80051618; // type:func         note ( 255 - x ) / 16
Game_80051790_twelveliner                = 0x80051790; // type:func static  note (   0 - x ) / 16
Game_80051880_sixliner                   = 0x80051880; // type:func static
Game_ControllerRepeat_Update             = 0x800518F0; // type:func static
Game_800519b4_thirtyliner                = 0x800519B4; // type:func static
Game_Update                              = 0x80051BA8; // type:func static  note calls GSETGP and PSETGP
Game_line_782_game_c                     = 0x80051CB0; // type:func
Game_render_stuff_line_850               = 0x80051F30; // type:func note calls GSETGP and PSETGP
Game_80052090_calls_3_functions          = 0x80052090; // type:func unused
Game_800520d0_calls_cubetiles_init       = 0x800520D0; // type:func unused
Game_Init                                = 0x80052114; // type:func note arg1 is byteNumPlayers, arg2 is byte *playerHandicaps, important function
// note above function sets sprint goal time, ultra goal 150, etc
Game_Deinit                              = 0x80052570; // type:func note checks winner, loser, jackpot for multiplayer


//      - {start: 0x018A10, type:   c, vram: 0x80052790, name: newtetris/gamestats}
initLinesInfo                            = 0x80052790; // type:func static  note does not set x,y display location, it sets the lines to 0 and also sets (unkC, unk10, unk14) to (0,1,0)
updateLineCount                        = 0x800527AC; // type:func static
getLineCount                           = 0x8005282C; // type:func
setLineCount                           = 0x8005283C; // type:func static  note 0xaaaaaaaa 0x55555555
displayLineCount                       = 0x80052860; // type:func static
GameStats_saveCurrentPieceFallVelocity = 0x80052904; // type:func
updateLinesToBeAdded                   = 0x800529A8; // type:func
GameStats_Update                       = 0x800529BC; // type:func
GameStats_Render                       = 0x80052A00; // type:func
GameStats_Init                         = 0x80052A28; // type:func
GameStats_Deinit                       = 0x80052A90; // type:func note does nothing


//      - {start: 0x018D20, type:   c, vram: 0x80052AA0, name: newtetris/gamefinish}
gamefinish_80052AA0_tenliner                  = 0x80052AA0; // type:func static
gamefinish_80052B30_tenliner                  = 0x80052B30; // type:func static
gamefinish_c_line_127                         = 0x80052BE4; // type:func static
gamefinish_80052D24_oneliner                  = 0x80052D24; // type:func static
gamefinish_80052D40_doesnothing               = 0x80052D40; // type:func static
gamefinish_80052D48_twoliner                  = 0x80052D48; // type:func
gamefinish_magic_number_180_sprint_twoliner   = 0x80052D5C; // type:func static  note is this related to sprint time?
gamefinish_80052D70_twoliner                  = 0x80052D70; // type:func static
gamefinish_80052D8C_nevercalled               = 0x80052D8C; // type:func unused
gamefinish_80052DA0_oneliner                  = 0x80052DA0; // type:func static
gamefinish_80052DAC_read_playfield_logic_cell = 0x80052DAC; // type:func static
gamefinish_80052F3C_eightliner                = 0x80052F3C; // type:func static
gamefinish_80052FC8_eightliner                = 0x80052FC8; // type:func static
gamefinish_c_line_383                         = 0x80053040; // type:func         note invalid state if not in (1,2,3,4)
gamefinish_80053280_twoliner                  = 0x80053280; // type:func         note called from FrameAct_Render
gamefinish_800532DC_nevercalled               = 0x800532DC; // type:func unused  note never called
gamefinish_something2                         = 0x800532E4; // type:func
gamefinish_80053390_fiveliner                 = 0x80053390; // type:func         note called from FrameAct_Init
gamefinish_80053400_fiveliner                 = 0x80053400; // type:func         note called from FrameAct_Deinit
gamefinish_8005344C_fiveliner                 = 0x8005344C; // type:func         note called from Game_Init
gamefinish_800534A4_fiveliner                 = 0x800534A4; // type:func         note called from Game_Deinit


//      - {start: 0x019780, type:   c, vram: 0x80053500, name: newtetris/playervars}
FUN_80053500_fiveliner                 = 0x80053500; // type:func note sets D_800CFED4 (numplayers?) = 1
FUN_80053538_fiveliner                 = 0x80053538; // type:func
PV_set_controller_no                   = 0x800535A0; // type:func
FUN_800535B8_fiveliner                 = 0x800535B8; // type:func
func_8005360C                          = 0x8005360C; // type:func unused  note never called


//      - {start: 0x0198F0, type:   c, vram: 0x80053670, name: newtetris/frameact}
FrameAct_set_state                            = 0x80053670; // type:func  note only called by Tetris_Init with state = 1, function sets g_frameAct_ptr->state = state
FrameAct_80053684_threeliner                  = 0x80053684; // type:func static
FrameAct_calls_increment_game_time_seconds2   = 0x800536BC; // type:func static
FrameAct_80053760_mediumliner                 = 0x80053760; // type:func static
FrameAct_80053868_twentyliner                 = 0x80053868; // type:func static
FrameAct_80053934_tenliner                    = 0x80053934; // type:func static
FrameAct_line_253                             = 0x800539E4; // type:func static  note checks 1,2,3, sets something to 7
FrameAct_NextPieces_Update                    = 0x80053AB0; // type:func static
FrameAct_calls_gamefinish_something2          = 0x80053B84; // type:func
FrameAct_calls_gamefinish_something           = 0x80053C14; // type:func static
FrameAct_ScheduleEvents                       = 0x80053C70; // type:func
FrameAct_Render                               = 0x80053DC0; // type:func  note add a note later
FrameAct_Init                                 = 0x80053DF8; // type:func  note called by Tetris_Init
FrameAct_Deinit                               = 0x80053E70; // type:func  note called by Tetris_Deinit
FrameAct_80053EA0_threeliner                  = 0x80053EA0; // type:func static
FrameAct_80053EC4_tenliner                    = 0x80053EC4; // type:func unused  note never called
FrameAct_80053F40_oneliner                    = 0x80053F40; // type:func
FrameAct_Deinit_doesnothing                   = 0x80053F48; // type:func  note called by Tetris_Deinit


//      - {start: 0x01A1D0, type:   c, vram: 0x80053F50, name: newtetris/tetris}
Tetris_CheckButtons                    = 0x80053F50; // type:func static
//  looks at curr player, numplayers, plays SFX, todo make a hack to play the different SFX in a known routine in order to identify each SFX asset address, large function, plays sound if D-PAD up (slam) D-PAD down and hold piece switch

Tetris_FUN_80054220_fourliner          = 0x80054220; // type:func
Tetris_Update                          = 0x8005423C; // type:func         note updates hold piece, board, stats, fallingcubes, mobilecubes, multisquare glows, explore later
Tetris_Render                          = 0x8005447C; // type:func         note important looking
Tetris_SetMarathonHandicap             = 0x80054588; // type:func static  note fill num lines with handicap minos
Tetris_SetSprintHandicap               = 0x8005464C; // type:func static  note param_1 + 0x6840
Tetris_SetUltraHandicap                = 0x80054710; // type:func static  note param_1 + 0x6840
Tetris_SetGameHandicap                 = 0x80054760; // type:func static  note tenliner with if 0,1,2
Tetris_Init                            = 0x800547F0; // type:func
Tetris_Deinit                          = 0x80054AF4; // type:func


//      - {start: 0x01AE00, type: asm, vram: 0x80054B80, name: newtetris/color}
Color_Tint                             = 0x80054B80; // type:func unused  note never called
Color_Brighten                         = 0x80054CA8; // type:func unused  note never called
Color_Blend                            = 0x80054DA0; // type:func         note sets src = (((dst - src) * dst_alpha) / 255) + src for all members of a color struct, called with dst_alpha = 0x80 from piecehold (50pct), dst_alpha = 0xC0 from currentpiece (75pct)


//      - {start: 0x01B150, type:   c, vram: 0x80054ED0, name: newtetris/piecedefs}
getCurPieceSpawnOffsetAsPoint          = 0x80054ED0; // type:func
getStartingRotOriginAsPoint            = 0x80054F08; // type:func
initPieceColorsScale16                 = 0x80054F5C; // type:func


//      - {start: 0x01B280, type: asm, vram: 0x80055000, name: newtetris/01B280}
gets_lineCounts_loops_numPlayers_checks_gametype = 0x80055000; // type:func
calls_game_deinit                                = 0x80055524; // type:func
FUN_80055704_threeliner                          = 0x80055704; // type:func
game_over_display_stuff_huge_function_q          = 0x80055744; // type:func note was named maybe_init_game_vars in ghidra 2.7 but that seems like a poor choice, seems to print lines won and allow for saving to gpak? its a super-long huge function


//      - {start: 0x01D300, type: asm, vram: 0x80057080, name: newtetris/01D300}
FUN_01D300_80057080_nevercalled              = 0x80057080; // type:func
FUN_01D300_800570b0_fiveliner                = 0x800570B0; // type:func
FUN_01D300_n64HeapUnalloc                    = 0x80057114; // type:func  note one liner just calls n64heapUnalloc
FUN_01D300_80057140_sixliner                 = 0x80057140; // type:func
FUN_01D300_800571d4_twentyliner              = 0x800571D4; // type:func  note interesting arg1,arg2 x84,x85 to x92,x93
FUN_01D300_800572f8_twoliner                 = 0x800572F8; // type:func
FUN_01D300_80057338_fifteenliner             = 0x80057338; // type:func


//      - {start: 0x01D6E0, type: asm, vram: 0x80057460, name: newtetris/01D6E0}
weird_lots_of_magic_number_setting_66xrefs       = 0x80057460; // type:func note huge super-long function maybe display single character without passing rgb?
display_one_text_character_rgb                   = 0x80059048; // type:func note huge super-long function
FUN_8005aa9c_prob_display_text_rgb_as_well       = 0x8005AA9C; // type:func note huge super-long function with more parameters than the one above
func_8005BBFC                                    = 0x8005BBFC; // type:func
func_8005BE40                                    = 0x8005BE40; // type:func


//      - {start: 0x025D00, type: asm, vram: 0x8005FA80, name: newtetris/pfgfx}
PFGFX_8005fa80_twoliner_calls_fun                = 0x8005FA80; // type:func
PFGFX_8005fab8_oneliner_calls_fun                = 0x8005FAB8; // type:func         note passes DAT_8011f260 + 8
PFGFX_Sets_x58_x59_Checks_NumPlayers_CurrPlayer  = 0x8005FAE0; // type:func         note sets x58 and x59 pos? might be offsets on where to start drawing each player's playfield
PFGFX_8005fc70_doesnothing                       = 0x8005FC70; // type:func static
GameCamera_Render                                = 0x8005FC78; // type:func
PFGFX_Init                                       = 0x8005FE68; // type:func         note called by Tetris_Init
PFGFX_SetTextDisplayPos_1p                       = 0x8005FEA0; // type:func static  note name, linecount, whatelse
PFGFX_SetTextDisplayPos_2p                       = 0x8006005C; // type:func static  note name, linecount, whatelse
PFGFX_SetTextDisplayPos_3p                       = 0x80060284; // type:func static  note name, linecount, whatelse
PFGFX_SetTextDisplayPos_4p                       = 0x800603F8; // type:func static  note name, linecount, whatelse
PFGFX_Playfield_Init                             = 0x80060598; // type:func
PFGFX_80060654_doesnothing                       = 0x80060654; // type:func unused  note calls 8005fc70 which does nothing

//      - {start: 0x026900, type:   c, vram: 0x80060680, name: newtetris/026900}
func_80060680                                    = 0x80060680; // type:func unused  note never called
func_80060704                                    = 0x80060704; // type:func unused  note never called
FUN_026900_sets_arg0_struct_to_arg1_arg2         = 0x8006073C; // type:func
FUN_026900_80060770_sevenliner                   = 0x80060770; // type:func
FUN_026900_PRNG_1                                = 0x80060814; // type:func  note similar to PRNG_2 but uses global addr DAT_8011fa70
FUN_026900_sets_g8011FA70_to_arg0                = 0x80060890; // type:func unused  note never called
FUN_026900_PRNG_2                                = 0x8006089C; // type:func  note similar to PRNG_1 but uses arg0
FUN_026900_800608f4_oneliner_shift6_1            = 0x800608F4; // type:func  note sin
FUN_026900_80060914_oneliner_shift6_2            = 0x80060914; // type:func  note cos
FUN_026900_8006093c_rounds_floors_loops_1024t    = 0x8006093C; // type:func  note magic numbers decimal 4294967296 512 16384

//      - {start: 0x026C80, type: asm, vram: 0x80060A00, name: newtetris/026C80}
FUN_026900_80060a00_fourliner_sets_arg0_e0123    = 0x80060A00; // type:func
FUN_026900_80060a1c_twoliner_sets_arg0_e01       = 0x80060A1C; // type:func
FUN_026900_80060a28_twelveliner_retbool          = 0x80060A28; // type:func
FUN_026900_80060ad4_oneliner_calls_fun           = 0x80060AD4; // type:func
FUN_026900_80060b04_twelveliner_loops_32t        = 0x80060B04; // type:func
FUN_026900_GU_or_ControllerRepeat_Update         = 0x80060BD4; // type:func
FUN_026900_nineliner_loops_32t                   = 0x80060CA0; // type:func

//      - {start: 0x026F90, type: asm, vram: 0x80060D10, name: newtetris/026F90}
func_80060D10                                    = 0x80060D10; // type:func
FUN_026900_80060d58_elevenliner                  = 0x80060D58; // type:func  note checks DAT_80000300
func_80060E30                                    = 0x80060E30; // type:func
func_8006110C                                    = 0x8006110C; // type:func
func_80061124                                    = 0x80061124; // type:func
func_80061134                                    = 0x80061134; // type:func
func_80061198                                    = 0x80061198; // type:func
func_800611E0                                    = 0x800611E0; // type:func
func_800614A8                                    = 0x800614A8; // type:func

//      - {start: 0x0279C0, type: asm, vram: 0x80061740, name: newtetris/0279C0}
FUN_0279C0_80061740_switch_0to8_1to6_same        = 0x80061740; // type:func  note looks interesting allocs heap


//      - {start: 0x027BF0, type: asm, vram: 0x80061970, name: newtetris/027BF0}
FUN_027BF0_convert_decimal_q                     = 0x80061970; // type:func  note interesting checks arg0 < 10,100,1000,10000
FUN_027BF0_80061a3c_tenliner_allocs_heap         = 0x80061A3C; // type:func
FUN_027BF0_check_music_settings_and_play         = 0x80061B18; // type:func  note checks MUSIC MODE 0 AUTO, 1 CHOSE, else RANDOM, is arg0 the background screen? long function with switch cases that perhaps pair the screens with music tracks
FUN_027BF0_Init                                  = 0x80062788; // type:func  note interesting also checks numplayers 1, 2, >2, case statements, called by Game_Init
FUN_027BF0_8006307c_sixliner                     = 0x8006307C; // type:func
FUN_027BF0_Deinit                                = 0x800630EC; // type:func  note called by Game_Deinit
FUN_027BF0_8006332c_thirtyfiveliner              = 0x8006332C; // type:func
FUN_027BF0_800636C0_display_game_stats_screen_q  = 0x800636C0; // type:func  note interesting huge function important looking case statement, elapsed time stuff


//      - {start: 0x02AF60, type: asm, vram: 0x80064CE0, name: newtetris/mobilepiece}
MobilePiece_Minos_setUpdateFlag                           = 0x80064CE0; // type:func
MobilePiece_80064e10_similar_to_Minos_setUpdFlag          = 0x80064E10; // type:func
MobilePiece_80064f54_fourliner_loops_4_times              = 0x80064F54; // type:func
MobilePiece_Render                                        = 0x80064FB0; // type:func  note calls minos setalpha, setvtxtransform, setupdateflag, Mino_render
MobilePiece_80065154_sevenliner_loops_4_times_v1_retbool  = 0x80065154; // type:func
MobilePiece_800651c8_sevenliner_loops_4_times_v2_retbool  = 0x800651C8; // type:func
MobilePiece_80065238_sevenliner_loops_4_times             = 0x80065238; // type:func
MobilePiece_800652e4_sets_arg0_struct_to_arg1_struct      = 0x800652E4; // type:func
MobilePiece_8006531c_fourliner_calls_fun_loops_4_times_v1 = 0x8006531C; // type:func
MobilePiece_8006537c_fourliner_calls_fun_loops_4_times_v2 = 0x8006537C; // type:func static
MobilePiece_800653e4_eightliner_sets_arg0_struct_to_other_args_loops_4_times = 0x800653E4; // type:func
MobilePiece_800654b0_sixliner_if_zero_if_one              = 0x800654B0; // type:func
MobilePiece_8006553c_nineliner_sets_arg0_struct           = 0x8006553C; // type:func
MobilePiece_800655c4_oneliner_if_calls_fun                = 0x800655C4; // type:func
MobilePiece_80065620_threeliner_if_zero_calls_fun_537c    = 0x80065620; // type:func
MobilePiece_8006567c_threeliner_if_notzero_calls_fun_537c = 0x8006567C; // type:func
MobilePiece_SetAlternateColor                             = 0x800656CC; // type:func

//      - {start: 0x02B990, type: asm, vram: 0x80065710, name: newtetris/piecehold}
PieceHold_80065710_twoliner_sets_to_0_and_0xff  = 0x80065710; // type:func static
PieceHold_80065720_fiveliner_two_traps          = 0x80065720; // type:func static
PieceHoldPiece_MakeShadowActive                 = 0x8006576C; // type:func static
PieceHoldPiece_RenderShadow                     = 0x80065894; // type:func static  note calls Minos_SetScale, MobilePiece_Render
PieceHold_8006593c_nineliner_sets_struct_stuff  = 0x8006593C; // type:func static
PieceHoldPiece_FinishSwap                       = 0x800659C0; // type:func static
PieceHold_80065a0c_tenliner_adds_sets_struct    = 0x80065A0C; // type:func static
PieceHoldPiece_Update                           = 0x80065ADC; // type:func static  note poor name choice doesnt follow conv
PieceHoldPiece_Render                           = 0x80065BD4; // type:func static  note calls Minos_SetScale, MobilePiece_Render
PieceHoldPiece_MakeActive                       = 0x80065C74; // type:func static
PieceHold_80065e20_lots_of_ifs_and_traps        = 0x80065E20; // type:func static
PieceHold_80065fbc_oneliner_calls_fun1          = 0x80065FBC; // type:func unused  note never called
PieceHoldPiece_Init                             = 0x80065FF0; // type:func static
PieceHold_80065ff8_oneliner_calls_fun2_wunk518  = 0x80065FF8; // type:func static  note calls fun with unk518
PieceHold_80066020_oneliner_calls_fun3_wunk518  = 0x80066020; // type:func static  note calls fun with unk518
PieceHold_80066048_tenliner_checks_numplayers   = 0x80066048; // type:func static
PieceHold_Update                                = 0x80066160; // type:func         note calls PieceHoldPiece_Update for both PieceHoldPieces
PieceHold_Render                                = 0x800661A0; // type:func         note calls PieceHold_80065bd4_calls_misetscale_mobprender2 for both PieceHoldPieces
PieceHold_Swap                                  = 0x800661D4; // type:func
PieceHold_Enable                                = 0x80066464; // type:func
PieceHold_Disable                               = 0x800664C0; // type:func
PieceHold_Init                                  = 0x80066518; // type:func         note calls prng, sets initial hold piece
PieceHold_Deinit                                = 0x800666A8; // type:func

//      - {start: 0x02C950, type: asm, vram: 0x800666D0, name: newtetris/ghostpiece}
GhostPiece_800666d0_sixliner_loops_arg1_times      = 0x800666D0; // type:func
GhostPiece_Render                                  = 0x80066730; // type:func
GhostPiece_8006677c_fourliner_loops                = 0x8006677C; // type:func static  note y +0x100, -0x100
GhostPiece_800667dc_twelveliner_sets_struct        = 0x800667DC; // type:func
GhostPiece_800668ec_sixliner_inits_struct          = 0x800668EC; // type:func

//      - {start: 0x02CBA0, type: asm, vram: 0x80066920, name: newtetris/currentpiece}
CurrentPiece_80066920_sixteenliner                         = 0x80066920; // type:func
getCurPieceSpawnPoint                                      = 0x80066AA8; // type:func
getStartingOriginOfRotationPoint                           = 0x80066B3C; // type:func
getStartingRotationAngle                                   = 0x80066BB4; // type:func static
getStartingRotationState                                   = 0x80066BE8; // type:func static
rotate_and_translate_mino                                  = 0x80066C10; // type:func
CurrentPiece_80066cc8_fourliner                            = 0x80066CC8; // type:func
CurrentPiece_80066d0c_calls_pf_xy_2_struct_loops4times_retbool = 0x80066D0C; // type:func note calls BoardP_playfield_xy_to_logic_cell_struct_8006e5e0
CurrentPiece_80066d8c_maybeRotCkw_retbool                  = 0x80066D8C; // type:func
CurrentPiece_80066ed4_maybeRotCCkw_retbool                 = 0x80066ED4; // type:func note popular function
CurrentPiece_80067020_twoliner_retbool                     = 0x80067020; // type:func note reads param_1 + 0x30
CurrentPiece_8006705c_twoliner_setstuff_0x30_0x04          = 0x8006705C; // type:func static
CurrentPiece_80067078_twelveliner_retbool                  = 0x80067078; // type:func
CurrentPiece_8006715c_twelveliner_plays_SFX                = 0x8006715C; // type:func
CurrentPiece_80067254_twelveliner_plays_SFX                = 0x80067254; // type:func
CurrentPiece_8006734c_thirtyliner_looks_interesting        = 0x8006734C; // type:func note also plays sfx
CurrentPiece_800675a8_fiveliner_loops4times                = 0x800675A8; // type:func
CurrentPiece_80067604_fourteenliner_loops4times            = 0x80067604; // type:func note also plays sfx
CurrentPiece_800676ac_fourliner_looper                     = 0x800676AC; // type:func
CurrentPiece_80067708_eightliner_interesting_1_2_8_10      = 0x80067708; // type:func
CurrentPiece_800677b8_twohundredliner_doit_last            = 0x800677B8; // type:func
CurrentPiece_80067bc0_sixliner_loops4times                 = 0x80067BC0; // type:func
CurrentPiece_80067c1c_fifteenliner_loops3times             = 0x80067C1C; // type:func
CurrentPiece_80067d1c_twoliner                             = 0x80067D1C; // type:func
CurrentPiece_Render                                        = 0x80067D50; // type:func note calls Minos_SetScale, MobilePiece_Render
CurrentPiece_80067dd8_big_fiftyliner                       = 0x80067DD8; // type:func
CurrentPiece_80068090_oneliner_sets_0x538_to_1             = 0x80068090; // type:func

//      - {start: 0x02E320, type: asm, vram: 0x800680A0, name: newtetris/nextpieces}
NextPieces_800680a0_sixliner                               = 0x800680A0; // type:func static
NextPieces_80068158_sevenliner_sets_arg0_struct_to_arg1    = 0x80068158; // type:func static
NextPieces_80068204_fourliner_sets_arg0_struct_math        = 0x80068204; // type:func static
NextPieceShadow_Render                                     = 0x80068248; // type:func static
NextPieces_8006832c_sixliner_shift_0xe                     = 0x8006832C; // type:func static  note unk518
NextPiece_Render                                           = 0x800683E4; // type:func static  note renders one next piece
NextPieces_800684e0_sevenliner_sets_arg0_struct_math       = 0x800684E0; // type:func static
NextPieces_800685ac_lg_interesting_arg3_is_nextpiecepos    = 0x800685AC; // type:func static  note checks for arg3 == 0 else arg3 in (1,2,3) else uh oh
NextPieces_8006883c_tenliner_loops_4_times_sets_glb_var    = 0x8006883C; // type:func static
NextPieces_800688e0_sets_global_var_element                = 0x800688E0; // type:func
NextPieces_80068904_twoliner_if_fb80_eq_1_call_fun         = 0x80068904; // type:func
NextPieces_Render                                          = 0x80068940; // type:func         note renders all next pieces?  loops 4 times?
NextPieces_800689c4_tenliner_loops_4_times                 = 0x800689C4; // type:func static
NextPieces_80068a84_calls_Bag63_GetNextPiece               = 0x80068A84; // type:func static
NextPieces_80068b18_threeliner                             = 0x80068B18; // type:func
NextPieces_80068b7c_largeliner_sets_lots_of_struct_elems   = 0x80068B7C; // type:func         note sets stuff on good ol DAT_8011fb80
NextPieces_Init                                            = 0x80068F10; // type:func
NextPieces_Deinit                                          = 0x80068FDC; // type:func

//      - {start: 0x02F270, type:   c, vram: 0x80068FF0, name: newtetris/lineeffect}
LineEffect_80068ff0_elevenliner                            = 0x80068FF0; // type:func static
LineEffect_800690e4_eightliner_loops_10_times              = 0x800690E4; // type:func static
LineEffect_80069160_seventeen_liner                        = 0x80069160; // type:func static
LineEffect_800692fc_sixteenliner_loops_10_times            = 0x800692FC; // type:func static
LineEffect_8006942c_sixliner                               = 0x8006942C; // type:func static
LineEffect_800694b0_sevenliner_loops_10_times              = 0x800694B0; // type:func static
LineEffect_Update                                          = 0x8006952C; // type:func         note nice case statement for state note invalid state error in default 
LineEffect_80069668_fourliner_sets_arg0_struct_v1          = 0x80069668; // type:func
LineEffect_80069684_threeliner_sets_arg0_struct_v2         = 0x80069684; // type:func static
LineEffect_8006969c_fourliner_sets_arg0_struct_v3          = 0x8006969C; // type:func static
LineEffect_800696b8_fiveliner_sets_arg0_struct_v4          = 0x800696B8; // type:func static
LineEffect_800696d8_fourliner_sets_arg0_struct_v5          = 0x800696D8; // type:func static
LineEffect_Init                                            = 0x800696F4; // type:func         note uses logic cell ptr, loops 10 times then case statement

//      - {start: 0x02FAB0, type: asm, vram: 0x80069830, name: newtetris/linescan}
LineScan_80069830_elevenliner_loops_20_times               = 0x80069830; // type:func  note calls LineEffect_Update
LineScan_800698e0_largeliner_loops_20_times_plays_sfx      = 0x800698E0; // type:func
LineScan_80069cf0_eighliner_loops_10_times_retbool         = 0x80069CF0; // type:func
LineScan_80069d60_fifteenliner_loops_20_times              = 0x80069D60; // type:func
LineScan_80069e2c_fiveliner                                = 0x80069E2C; // type:func
LineScan_80069e84_sevenliner_loops_20_times                = 0x80069E84; // type:func
LineScan_80069ec0_sevenliner_loops_4_times                 = 0x80069EC0; // type:func
LineScan_80069f10_threeliner_lowestscanableline            = 0x80069F10; // type:func  note code line 297
LineScan_Init                                              = 0x80069F68; // type:func  note called by Tetris_Init
LineScan_80069fb8_elevenliner_case_and_loop_interesting    = 0x80069FB8; // type:func

//      - {start: 0x0302D0, type: asm, vram: 0x8006A050, name: newtetris/multisquare}
Multisquare_8006a050_extralarge_manyloops_interesting      = 0x8006A050; // type:func  note hacks go here to make 6x6 etc
Multisquare_8006a3ec_twoliner                              = 0x8006A3EC; // type:func
Multisquare_8006a410_fourliner                             = 0x8006A410; // type:func
Multisquare_pGetColor                                      = 0x8006A47C; // type:func
Multisquares_Test4x4byType                                 = 0x8006A4EC; // type:func
Multisquare_8006a6bc_oneliner_calls_fun                    = 0x8006A6BC; // type:func
Multisquare_8006a6f0_threeliner_sets_arg0_stuff            = 0x8006A6F0; // type:func
Multisquare_8006a708_fiveliner_sets_arg0_stuff             = 0x8006A708; // type:func

//      - {start: 0x0309C0, type: asm, vram: 0x8006A740, name: newtetris/multisquareglow}
MultisquareGlow_8006a740_thirtyfiveliner            = 0x8006A740; // type:func
MultisquareGlow_8006a9bc_fiveliner_sets_arg0_struct = 0x8006A9BC; // type:func
MultisquareGlow_8006a9f4_twentyliner_loops_t7_t17   = 0x8006A9F4; // type:func
MultisquareGlow_isArg0_lessthan_44                  = 0x8006AB84; // type:func  note returns 0 or 1
MultisquareGlow_8006aba4_loops_44_times_1           = 0x8006ABA4; // type:func
MultisquareGlow_8006abf4_loops_44_times_2           = 0x8006ABF4; // type:func
MultisquareGlow_8006ac2c_loops_10_times             = 0x8006AC2C; // type:func
MultisquareGlow_8006ad0c_checks_1_2_3_4             = 0x8006AD0C; // type:func
MultisquareGlow_8006ada4_Init2                      = 0x8006ADA4; // type:func  note called by Tetris_Init, loops 44 times
MultisquareGlow_Deinit_doesnothing                  = 0x8006ADE4; // type:func
Multisquares_UpdateGlows                            = 0x8006ADEC; // type:func  note loops 44 times
Multisquares_RenderGlows                            = 0x8006AE58; // type:func  note loops 44 times
MultisquareGlow_8006aebc_loops_44_times_4           = 0x8006AEBC; // type:func
// perhaps start of new segment
MultisquareGlow_8006af00_eightliner                 = 0x8006AF00; // type:func
MultisquareGlow_8006af70_nineliner                  = 0x8006AF70; // type:func
MultisquareGlow_Init                                = 0x8006B050; // type:func  note not called by Tetris_Init, repeat, not called by Tetris_Init, it is actually called by a Multisquare function
MultisquareGlow_InitStaticMembers                   = 0x8006B248; // type:func  note called by Game_Init and another Game_ function, with g_playercount as arg0
MultisquareGlow_8006b384_oneliner_calls_fun         = 0x8006B384; // type:func

//      - {start: 0x031630, type: asm, vram: 0x8006B3B0, name: newtetris/keyspin}
KeySpin_8006b3b0_tenliner_nested_loop_10t                  = 0x8006B3B0; // type:func  note 10 is width of pf?
KeySpin_8006b454_fourliner_sets_arg0_struct                = 0x8006B454; // type:func
KeySpin_8006b478_eightliner                                = 0x8006B478; // type:func
KeySpin_8006b53c_uses_pf_logic_cell_loops_10t_1            = 0x8006B53C; // type:func  note 10 is width of pf?
KeySpin_8006b608_uses_pf_logic_cell_loops_10t_2            = 0x8006B608; // type:func  note 10 is width of pf?
KeySpin_8006b6b4_twelveliner_ifs_elses_1                   = 0x8006B6B4; // type:func
KeySpin_8006b7b4_twelveliner_ifs_elses_2                   = 0x8006B7B4; // type:func
KeySpin_8006b8b8_fiveliner_calls_b6b4_b7b4                 = 0x8006B8B8; // type:func  note calls above 2 funs
KeySpin_8006b938_thirteenliner_sets_arg0_struct            = 0x8006B938; // type:func

KeySpin_8006ba24_thirtysixliner_sets_arg0_struct           = 0x8006BA24; // type:func
KeySpin_8006bc8c_twelveliner_uses_pf_logic_cell_1          = 0x8006BC8C; // type:func
KeySpin_8006bd94_twelveliner_uses_pf_logic_cell_2          = 0x8006BD94; // type:func
KeySpin_8006be9c_fifteenliner_uses_pflcell_loopts_10t      = 0x8006BE9C; // type:func
KeySpin_8006c09c_tenliner_loops_lcv_arg0_unk58             = 0x8006C09C; // type:func
KeySpin_8006c160_twentyfiveliner_loops_lcv_arg0_unk58      = 0x8006C160; // type:func
KeySpin_InitVPulse                                         = 0x8006C318; // type:func
KeySpin_8006c5c4_sevenliner_sets_arg0_struct_1             = 0x8006C5C4; // type:func
KeySpin_8006c644_fourliner_sets_arg0_struct                = 0x8006C644; // type:func
KeySpin_8006c690_sevenliner_sets_arg0_struct_2             = 0x8006C690; // type:func
KeySpin_8006c710_medliner_interesting_calls_pf_xy_to_lgc   = 0x8006C710; // type:func
KeySpin_8006ca90_nineliner_sets_arg0_struct                = 0x8006CA90; // type:func
KeySpin_8006cb10_switch_arg0_2_to_8_playsfx_35             = 0x8006CB10; // type:func

//      - {start: 0x032F00, type: asm, vram: 0x8006CC80, name: newtetris/032F00}
FUN_032F00_8006cc80_twentyliner_checks_pnum_1_2_4          = 0x8006CC80; // type:func  note calls Game
FUN_032F00_8006cd98_tenliner_checks_12                     = 0x8006CD98; // type:func
FUN_032F00_8006ce30_tenliner_magic_4000                    = 0x8006CE30; // type:func
FUN_032F00_8006cedc_sets_glb_to_fun_call_glb               = 0x8006CEDC; // type:func
debug_print2                                               = 0x8006CF08; // type:func
FUN_032F00_MVC_control_menu_choice_process                 = 0x8006CF14; // type:func  note this looks real interesting, looks like case statement to pick different menu choices

//      - {start: 0x033310, type: asm, vram: 0x8006D090, name: newtetris/033310}
FUN_033310_setPieceDef                       = 0x8006D090; // type:func
FUN_033310_getPhysicalCurPieceSpawnPos       = 0x8006D0AC; // type:func
FUN_033310_getPhysicalStartingRotOrigin      = 0x8006D11C; // type:func
FUN_033310_Init                              = 0x8006D17C; // type:func  note set piecehold unk1498 elems
FUN_033310_Deinit                            = 0x8006D194; // type:func  note similar to above but sets to zero 

//      - {start: 0x033430, type: asm, vram: 0x8006D1B0, name: newtetris/board}
Board_Update                 = 0x8006D1B0; // type:func
Board_8006D1E0_doesnothing1  = 0x8006D1E0; // type:func unused  note never called
Board_8006D1EC_doesnothing2  = 0x8006D1EC; // type:func unused  note never called
Board_8006D1F8_doesnothing3  = 0x8006D1F8; // type:func unused  note never called
Board_Init                   = 0x8006D200; // type:func         note called only by Tetris_Init
Board_Deinit                 = 0x8006D278; // type:func         note called only by Tetris_Deinit

//      - {start: 0x033540, type:   c, vram: 0x8006D2C0, name: newtetris/boardinfo}
BoardInfo_Init               = 0x8006D2C0; // type:func         note called by Tetris_Init, not called elsewhere
get_board_size               = 0x8006D2E4; // type:func static
get_board_location           = 0x8006D32C; // type:func static
get_board_center             = 0x8006D344; // type:func

//      - {start: 0x033640, type: asm, vram: 0x8006D3C0, name: newtetris/boardpieces}
BoardP_8006d3c0_fourliner                                    = 0x8006D3C0; // type:func
BoardP_8006d450_fourteenliner_pf_logic_cell_loops            = 0x8006D450; // type:func
BoardP_8006d500_tenliner_pf_logic_cells_loops                = 0x8006D500; // type:func static
BoardP_8006d5bc_sixliner_calls_UpdateQueue_AddEntry          = 0x8006D5BC; // type:func
BoardP_8006d674_tenliner_alloc_fallingcubes                  = 0x8006D674; // type:func
BoardP_8006d728_checkAndSetSurroundingCells                  = 0x8006D728; // type:func static
BoardP_8006d910_sevenliner_loopThroughConnectedMinos         = 0x8006D910; // type:func static
BoardP_8006d998_sixliner_loops                               = 0x8006D998; // type:func static
BoardP_8006d9d8_calls_pf_xy_to_logic_cell_loops              = 0x8006D9D8; // type:func
BoardP_8006da8c_sixliner_sets_stuff_9                        = 0x8006DA8C; // type:func static
BoardP_8006daf0_sixliner_sets_stuff_7                        = 0x8006DAF0; // type:func static
BoardP_UpdateQueueEntry_Update                               = 0x8006DB54; // type:func static
BoardP_8006dbb8_eightliner_calls_UPDQueueEntry_Update_loops  = 0x8006DBB8; // type:func static
BoardP_UpdateQueue_AddEntry                                  = 0x8006DC1C; // type:func static
BoardP_8006dcc0_twoliner_sets_to_600_0                       = 0x8006DCC0; // type:func static
BoardP_8006dcd0_eightliner_loops_upto_19_times_increment     = 0x8006DCD0; // type:func
BoardP_8006dd1c_eightliner_loops_upto_19_times_decrement     = 0x8006DD1C; // type:func
BoardP_8006dd64_check_for_nonempty_cell_downwards            = 0x8006DD64; // type:func
BoardP_8006ddd0_check_for_nonempty_cell_upwards              = 0x8006DDD0; // type:func
BoardP_8006de40_nineliner                                    = 0x8006DE40; // type:func
BoardP_8006df38_twentyfiveliner_3_loops                      = 0x8006DF38; // type:func
BoardPieces_SwapCubes                                        = 0x8006E0E8; // type:func
BoardP_8006e288_adds_8_entries_and_swaps_cubes               = 0x8006E288; // type:func
BoardPieces_RemoveLine                                       = 0x8006E34C; // type:func unused  note never called
BoardP_IsPositionEmpty                                       = 0x8006E498; // type:func
BoardP_IsPointEmpty                                          = 0x8006E4E8; // type:func
BoardP_playfield_xy_to_logic_cell_struct_8006e5e0            = 0x8006E5E0; // type:func
BoardP_8006e64c_calls_UpdateQueue_AddEntry                   = 0x8006E64C; // type:func
BoardPieces_Update                                           = 0x8006E6F4; // type:func
BoardPieces_Init                                             = 0x8006E724; // type:func
BoardPieces_Deinit                                           = 0x8006E86C; // type:func

//      - {start: 0x034B30, type: asm, vram: 0x8006E8B0, name: newtetris/cube}
Cube_8006e8b0_sets_struct_0x02_to_0x12_to_mostly_zeros       = 0x8006E8B0; // type:func static
Cube_8006e8f8_sets_struct_0x14_to_0x24_to_mostly_zeros       = 0x8006E8F8; // type:func
Cube_Alloc                                                   = 0x8006E940; // type:func
Cube_NewCellInfo                                             = 0x8006E9C8; // type:func
Cube_NextCellId                                              = 0x8006EA18; // type:func static

//      - {start: 0x034CC0, type: asm, vram: 0x8006EA40, name: newtetris/mobilecubes}
MobileCubes_Move                                              = 0x8006EA40; // type:func static
MobileCubes_Update                                            = 0x8006EC4C; // type:func
MobileCubes_Render                                            = 0x8006ECC0; // type:func
MobileCubes_Alloc                                             = 0x8006ED94; // type:func
MobileCubes_Unalloc                                           = 0x8006EE10; // type:func
MobileCubes_Init                                              = 0x8006EE34; // type:func
MobileCubes_Deinit                                            = 0x8006EED8; // type:func

//      - {start: 0x0351C0, type: asm, vram: 0x8006EF40, name: newtetris/fallingcubes}
FallingCubes_Drop                                            = 0x8006EF40; // type:func static
FallingCubes_Update                                          = 0x8006EFEC; // type:func
FallingCubes_SetAlpha                                        = 0x8006F064; // type:func
FallingCubes_Alloc                                           = 0x8006F0E0; // type:func
FallingCubes_Init                                            = 0x8006F198; // type:func
FallingCubes_Deinit                                          = 0x8006F21C; // type:func

//      - {start: 0x0354E0, type: asm, vram: 0x8006F260, name: newtetris/minos}
Minos_8006f260_eightliner_calls_8007641c_4_times      = 0x8006F260; // type:func static  note 0x38, 0x40, 0x48, 0x50
Minos_8006f300_eightliner_calls_80076458_4_times      = 0x8006F300; // type:func static
func_8006F39C                                         = 0x8006F39C; // type:func static
Minos_8006f4b4_thirtyliner_interesting                = 0x8006F4B4; // type:func static
func_8006F7E8                                         = 0x8006F7E8; // type:func static
Minos_8006f7f0_sets_struct_0_to_0x11                  = 0x8006F7F0; // type:func static
Minos_8006f994_sets_struct_0_to_0x23                  = 0x8006F994; // type:func static
Minos_8006fc8c_twentyfive_liner                       = 0x8006FC8C; // type:func static
Minos_Mino_Render                                     = 0x8006FE38; // type:func
Minos_800702e4_nineliner                              = 0x800702E4; // type:func
Minos_80070398_fourteenliner                          = 0x80070398; // type:func
Minos_800704e0_threeliner_sets_0x130                  = 0x800704E0; // type:func static
Minos_80070528_Morph                                  = 0x80070528; // type:func
Minos_80070818_oneliner_sets_arg0_0x130_to_arg1       = 0x80070818; // type:func
Minos_80070820_fiveliner_sets_arg0_2_4_8_12_to_arg1   = 0x80070820; // type:func
Minos_80070860_fortyliner                             = 0x80070860; // type:func
Minos_800709d8_threeliner_sets_arg0_1c_1e_1d          = 0x800709D8; // type:func
Minos_800709EC                                        = 0x800709EC; // type:func
Minos_80070a34_twentyliner                            = 0x80070A34; // type:func

Minos_80070c40_twoliner_set_OR_1        = 0x80070C40; // type:func note OR 1
Minos_80070c70_threeliner_set_OR_8      = 0x80070C70; // type:func note OR 8
Minos_80070cb8_threeliner_set_OR_4      = 0x80070CB8; // type:func note OR 4
Minos_SetScale                          = 0x80070D00; // type:func note OR 2
Minos_SetAlpha                          = 0x80070D30; // type:func
Minos_Init                              = 0x80070D40; // type:func note called by Tetris_Init
Minos_Deinit_doesnothing                = 0x80070EC0; // type:func note called by Tetris_Deinit
Minos_BeginRender                       = 0x80070EC8; // type:func
Minos_EndRender                         = 0x80070F70; // type:func
Minos_80070fd8_notcalled_q              = 0x80070FD8; // type:func unused
Minos_8007104c_fiveliner_nuts           = 0x8007104C; // type:func
Minos_80071100_fiveliner_nuts2          = 0x80071100; // type:func
Minos_SetVtxTransform                   = 0x8007116C; // type:func

//      - {start: 0x037460, type: asm, vram: 0x800711E0, name: newtetris/bag63}
Bag63_FillBag                           = 0x800711E0; // type:func static
Bag63_RefillQueue                       = 0x80071238; // type:func static
Bag63_GetNextPiece                      = 0x80071394; // type:func
Bag63_Init                              = 0x800713F0; // type:func
Bag63_Deinit                            = 0x80071470; // type:func

//      - {start: 0x037700, type: asm, vram: 0x80071480, name: newtetris/037700}
displayTimeFormatted_XY_RGBA            = 0x80071480; // type:func

//      - {start: 0x0379B0, type: asm, vram: 0x80071730, name: newtetris/0379B0}
displayPausePopupMenu                   = 0x80071BF0; // type:func

//      - {start: 0x038560, type: asm, vram: 0x800722E0, name: newtetris/finalrom_datetime}

//      - {start: 0x038580, type: asm, vram: 0x80072300, name: newtetris/landfill}
Landfill_800723a0_calls_garbage_fun     = 0x800723A0; // type:func  note 2 liner, calls 2 functions
Landfill_8007240c_fiveliner             = 0x8007240C; // type:func  note called in several places, including Tetris_Init
Landfill_Garbage                        = 0x8007283C; // type:func  note called by Tetris_Init, returns int, not called elsewhere
Landfill_Init                           = 0x8007287C; // type:func
Landfill_Deinit                         = 0x80072988; // type:func

//      - {start: 0x038DB0, type: asm, vram: 0x80072B30, name: newtetris/garbage}
Garbage_Init                            = 0x80072D38; // type:func  note called by Tetris_Init, not called elsewhere
Garbage_Deinit                          = 0x80072E24; // type:func
// todo next donext nextdo garbage
Garbage_80072e2c_set_arg0p_to_arg1      = 0x80072E2C; // type:func  note weird func, why is this even a function, called from places seemingly unrelated to garbage?

//      - {start: 0x0393B0, type: asm, vram: 0x80073130, name: newtetris/aimedat}
//      - {start: 0x039E50, type: asm, vram: 0x80073BD0, name: newtetris/hotpotato}

//      - {start: 0x03A750, type: asm, vram: 0x800744D0, name: newtetris/03A750}
func_800744D0                     = 0x800744D0; // type:func unused  note never called
func_800745DC                     = 0x800745DC; // type:func unused  note never called
FUN_03A750_800746c0_twentyliner   = 0x800746C0; // type:func         note gets called from all kinds of places
FUN_03A750_80074888_twelveliner   = 0x80074888; // type:func         note gets called from all kinds of places

//      - {start: 0x03AC20, type:   c, vram: 0x800749A0, name: newtetris/03AC20}
func_8007523C                     = 0x8007523C; // type:func

//      - {start: 0x03B700, type: asm, vram: 0x80075480, name: newtetris/03B700}

//      - {start: 0x03BB30, type: asm, vram: 0x800758B0, name: newtetris/cubetiles}
CubeTiles_CopyPartialTile              = 0x800758B0; // type:func
CubeTiles_80075a84_thirteenliner       = 0x80075a84; // type:func sets DAT_8011fcb8-fcc0 and calls CopyPartialTile four times
CubeTiles_Init                         = 0x80075C98; // type:func  note has bumpmap related stuff
CubeTiles_Deinit                       = 0x80075DB4; // type:func
// todo donext nextdo todonext cubetiles

//      - {start: 0x03C130, type: asm, vram: 0x80075EB0, name: newtetris/03C130}
FUN_03C130_80075EB0_nineliner_allocs_heap    = 0x80075EB0; // type:func

//      - {start: 0x03C220, type: asm, vram: 0x80075FA0, name: newtetris/03C220}
//      - {start: 0x03D120, type: asm, vram: 0x80076EA0, name: newtetris/03D120}
//      - {start: 0x03D140, type: asm, vram: 0x80076EC0, name: newtetris/03D140}

//      - {start: 0x03D650, type:   c, vram: 0x800773D0, name: newtetris/sram}
FUN_SRAM_n64HeapUnalloc_and_set_to_NULL     = 0x800773D0; // type:func  note call n64HeapUnalloc, set arg0 ptr to NULL
FUN_SRAM_80077408_twentyliner_loops_46t     = 0x80077408; // type:func  note calls n64HeapAlloc
FUN_SRAM_80077610_twentyliner_loops_51t     = 0x80077610; // type:func  note calls n64HeapAlloc
displayText_XY_RGBA_1                       = 0x80077818; // type:func
displayText_XY_RGBA_2                       = 0x80077960; // type:func
displayText_XY_RGBA_3                       = 0x80077AA8; // type:func  note returns an int
displayText_XY_RGBA_4                       = 0x80077BA8; // type:func  note usual div 0 trap and that other one
FUN_SRAM_80077d38_fourliner                 = 0x80077D38; // type:func
string_do_something_weird                   = 0x80077D88; // type:func
FUN_SRAM_80077e18_fifteenliner_has_traps    = 0x80077E18; // type:func  note usual div 0 trap and that other one
displayText_80077ee0_5                      = 0x80077EE0; // type:func  note yet another variant
FUN_SRAM_8007802c_fiveliner                 = 0x8007802C; // type:func
displayText_80078094_6                      = 0x80078094; // type:func  note yet another variant
FUN_SRAM_800781a8_elevenliner_loops_arg2_t  = 0x800781A8; // type:func
displayText_80078244_7                      = 0x80078244; // type:func  note yet another variant, used by credits?

FUN_SRAM_80078300_twelveliner_div60_loop_30t_a = 0x80078300; // type:func
FUN_SRAM_80078424_twelveliner_div60_loop_30t_b = 0x80078424; // type:func
FUN_SRAM_80078534_tenliner_loops               = 0x80078534; // type:func
FUN_SRAM_800785e0_sixliner_loop_arg0_t         = 0x800785E0; // type:func
FUN_SRAM_8007868c_tenliner_loop_arg0_t         = 0x8007868C; // type:func
FUN_SRAM_8007875c_check_gameover_conditions    = 0x8007875C; // type:func  note 260 liner
FUN_SRAM_800795d8_fourteenliner_loops_8t       = 0x800795D8; // type:func
// todo resume here
//FUN_SRAM_; // type:func

// can we split segment here?
set_total_wonder_lines                 = 0x8007BC90; // type:func
get_total_wonder_lines                 = 0x8007BCB4; // type:func
load_from_sram                         = 0x8007C0EC; // type:func
func_8007C5CC                          = 0x8007C5CC; // type:func note save_to_sram?

// newtetris/0428D0, vram: 0x8007C650
func_8007CF40                          = 0x8007CF40; // type:func

//- {start: 0x044240, type:   c, vram: 0x8007DFC0, name: newtetris/n64heap}
n64HeapInit                            = 0x8007DFC0; // type:func
n64HeapAlloc                           = 0x8007E03C; // type:func
n64HeapAllocAppend                     = 0x8007E1DC; // type:func unused  note never called, unclear how this might be used
n64HeapUnalloc                         = 0x8007E328; // type:func
n64HeapGetTotalMemUsed                 = 0x8007E45C; // type:func unused  note returns the total memory used by heap, walks the heap and adds size in bytes of each block plus sizeof the heap struct which is 16 bytes, exists in ghidra code but not called
n64HeapGetTotalMemFree                 = 0x8007E4A4; // type:func         note returns available heap memory, walks the heap and adds all the sizes where pBlock is null, but also substracts sizeof heap for those same chunks, called several times lot by audio for debug printing
n64HeapGetMaxFreeBlockSize             = 0x8007E4F4; // type:func         note returns amount of data bytes in largest free chunk in heap (subtracting sizeof heap struct), called only once in the game by audio
n64HeapGetNumFragments                 = 0x8007E550; // type:func unused  note returns the number of handles that have been created and freed excluding the initial handle created by HeapInit (counts handles whose pBlock is NULL excluding the last handle), func exists in ghidra but not called
n64HeapGetTotalHandles                 = 0x8007E5A4; // type:func unused  note returns total number of handles (including ones whose pBlock is NULL), func exists in ghidra but not called?
n64HeapStats                           = 0x8007E5D4; // type:func         note prints out heap stats
// the two functions below are perhaps used to measure how much total space over a period of time is allocated, for example, if one wanted to know how much space has been allocated during the lifetime of a game or when entering Options menu, and then you would reset it back to 0, when you wanted to begin a new measurement
n64HeapResetAllocCumulative            = 0x8007E734; // type:func unused  note never called just does D_800D3198 = 0
n64HeapGetAllocCumulative              = 0x8007E740; // type:func unused  note never called just returns D_800D3198

//      - {start: 0x0449D0, type:   c, vram: 0x8007E750, name: newtetris/0449D0}
func_8007FBB0                          = 0x8007FBB0; // type:func

//      - {start: 0x046030, type: asm, vram: 0x8007FDB0, name: newtetris/endscroller}
EndScroller_8007fdb0_returns_0_1_2     = 0x8007FDB0; // type:func
EndScroller_8007fe54_twoliner          = 0x8007FE54; // type:func
EndScroller_font_size_scrolltext       = 0x8007FEF4; // type:func  note address 800d3200 (the 0's and 1's array) for fontsize for each line of the credits text 0 = small font, 1 = large font
EndScroller_8007ffb0_doesnothing       = 0x8007FFB0; // type:func
EndScroller_8007ffb8_oneliner_if       = 0x8007FFB8; // type:func  note sets arg0->unk1 to 1 if true
EndScroller_Init                       = 0x8007FFE4; // type:func  note counts newlines, allocs line pool from heap
EndScroller_Deinit                     = 0x8008015C; // type:func  note line 416
EndScroller_8008023c_line_452          = 0x8008023C; // type:func  note if *arg0 eq 0 debug called not active
EndScroller_80080400_line_502          = 0x80080400; // type:func  note if *arg0 eq 0 debug called not active

//      - {start: 0x046770, type: asm, vram: 0x800804F0, name: newtetris/046770}
FUN_046770_800804f0_many_heapallocs_for_arg0_elems       = 0x800804F0; // type:func
FUN_046770_8008074c_nineliner_calls_9funcs_warg0_elems   = 0x8008074C; // type:func
FUN_046770_8008080c_threeliner_sets_arg0                 = 0x8008080C; // type:func  note increments arg0 elements by arg1 elems
FUN_046770_magic_150_is_it_ultra_related                 = 0x8008085C; // type:func  note probably not ultra related

//      - {start: 0x046CF0, type: asm, vram: 0x80080A70, name: newtetris/046CF0}
// consider naming this stringutils.c ?
FUN_046CF0_leftSubString          = 0x80080A70; // type:func  note confirm that this looks for char arg1 within string arg0, and returns the left substring up till (and including?) that char, see ghidra with named vars
FUN_046CF0_inString               = 0x80080AB8; // type:func  note confirm that this returns the position of char arg1 within string arg0, see ghidra with named vars
FUN_046CF0_countNewLinesInString  = 0x80080B08; // type:func  note returns the count of '\n' characters

//      - {start: 0x046DD0, type: asm, vram: 0x80080B50, name: newtetris/046DD0}

// - {start: 0x0470D0, type:   c, vram: 0x80080E50, name: newtetris/0470D0}
func_80080E50                       = 0x80080E50; // type:func
func_80080EAC                       = 0x80080EAC; // type:func
func_80080EB4                       = 0x80080EB4; // type:func
func_80080EC8                       = 0x80080EC8; // type:func
func_80080F08                       = 0x80080F08; // type:func
func_80080F30                       = 0x80080F30; // type:func

// - {start: 0x0471E0, type:   c, vram: 0x80080F60, name: newtetris/minilzo}
__lzo_ptr_linear                    = 0x80080F60; // type:func
__lzo_align_gap                     = 0x80080F74; // type:func
lzo_assert                          = 0x80080FE0; // type:func
lzo_copyright                       = 0x80081000; // type:func
lzo_version                         = 0x8008100C; // type:func
lzo_version_string                  = 0x80081014; // type:func
lzo_version_date                    = 0x80081020; // type:func
_lzo_version_string                 = 0x8008102C; // type:func
_lzo_version_date                   = 0x80081038; // type:func
lzo_adler32                         = 0x80081044; // type:func
lzo_memcmp                          = 0x800812C4; // type:func
lzo_memcpy                          = 0x80081328; // type:func
lzo_memmove                         = 0x80081390; // type:func
lzo_memset                          = 0x80081458; // type:func
basic_integral_check                = 0x80081490; // type:func static
basic_ptr_check                     = 0x80081530; // type:func static
ptr_check                           = 0x800815A8; // type:func static
_lzo_config_check                   = 0x80081A68; // type:func
schedule_insns_bug                  = 0x80081C74; // type:func static
strength_reduce_bug                 = 0x80081CC8; // type:func static
__lzo_init2                         = 0x80081D1C; // type:func
_lzo1x_1_do_compress                = 0x80081F0C; // type:func static
lzo1x_1_compress                    = 0x800825B0; // type:func
lzo1x_decompress                    = 0x800827EC; // type:func
lzo1x_decompress_safe               = 0x80082B6C; // type:func

//      - {start: 0x049380, type: asm, vram: 0x80083100, name: newtetris/049380}

//      - {start: 0x0495A0, type:   c, vram: 0x80083320, name: newtetris/credits}
Credits_Init                                 = 0x80083320; // type:func
Credits_80083450_oneliner_calls_80090a44     = 0x80083450; // type:func
Credits_StateMachine_q                       = 0x80083470; // type:func  note 0 = init, 1 = scroll, 2 = deinit?

//      - {start: 0x0497E0, type: asm, vram: 0x80083560, name: newtetris/0497E0}
debug_print_reason_routine             = 0x80083560; // type:func
func_80084630                          = 0x80084630; // type:func

//      - {start: 0x04A980, type: asm, vram: 0x80084700, name: newtetris/audio}
Audio_InitAudio                            = 0x80084700; // type:func
Audio_ChangeSong                           = 0x80084AB0; // type:func  note arg0 is songNum
Audio_FreeAudio                            = 0x80084C98; // type:func
Audio_80084e20_twentyliner                 = 0x80084E20; // type:func  note load bank LoadBank? into buffer? change channel or bank? ref error msg Sperm Head
Audio_UnloadSFX                            = 0x80084F80; // type:func
Audio_LoadSFX                              = 0x80085030; // type:func
Audio_80085408_oneliner_calls_allocdcm     = 0x80085408; // type:func
Audio_ALManager                            = 0x80085430; // type:func
Audio_PreNmiAudio                          = 0x800857B8; // type:func  note dubious name taken straight from a debug
Audio_80085924_fortyliner_sets_arg0_struct = 0x80085924; // type:func
Audio_80085b9c_threeliner                  = 0x80085B9C; // type:func
Audio_80085bec_tenliner                    = 0x80085BEC; // type:func
Audio_Wrap                                 = 0x80085D04; // type:func

//      - {start: 0x04BFD0, type: asm, vram: 0x80085D50, name: newtetris/04BFD0}

Audio2_InitVoices                          = 0x80085D50; // type:func
Audio2_AllocDcmHeader                      = 0x80085F8C; // type:func
Audio2_80086138_largeliner_channels        = 0x80086138; // type:func
// is there an AllocDcmScratch16 here that is not found by ghidra?
Audio2_AllocDcmScratch8                    = 0x800864B4; // type:func
Audio2_80087478_oneliner_calls_fun         = 0x80087478; // type:func
Audio2_800874ac_sevenliner                 = 0x800874AC; // type:func
Audio2_8008756c_eightliner                 = 0x8008756C; // type:func
Audio2_80087618_fourteenliner_loops_256t   = 0x80087618; // type:func
Audio2_80087770_oneliner_turn_on           = 0x80087770; // type:func
Audio2_8008777c_oneliner_turn_off          = 0x8008777C; // type:func
Audio2_GFXDone_SendPlayMessage             = 0x80087784; // type:func
Audio2_8008780c_sixliner_v1                = 0x8008780C; // type:func
Audio2_8008787c_sixliner_v2                = 0x8008787C; // type:func
Audio2_Restart                             = 0x800878F0; // type:func  note huge function
Audio2_80088ba4_fiveliner                  = 0x80088BA4; // type:func
Audio2_GFXDone_SendStopMessage             = 0x80088C14; // type:func
Audio2_80088c84_largeliner                 = 0x80088C84; // type:func
Audio2_80089030_hugeliner_SFX_Channel      = 0x80089030; // type:func
Audio2_80089d5c_twentyfourliner_sendstop   = 0x80089D5C; // type:func
// question should there be a segment named sfxplayer.c (ref strings)
Audio2_80089edc_thirtyfourliner_loops      = 0x80089EDC; // type:func  note weird loop til neq 800d3b90
Audio2_Play_SFX_Bank_Channel               = 0x8008A088; // type:func  note is there a load into bank function
Audio2_Play_SFX                            = 0x8008A5C8; // type:func  note calls Play_SFX_Bank_Channel
Audio2_8008a61c_twelveliner                = 0x8008A61C; // type:func
Audio2_8008a6ec_nineliner                  = 0x8008A6EC; // type:func  note interesting eq 32000
Audio2_8008a7c0_fiveliner                  = 0x8008A7C0; // type:func  note another eq 32000 decimal
Audio2_SFX_Speed_Change                    = 0x8008A80C; // type:func  note huge function 350 lines calls set pitch
Audio2_SetPitch                            = 0x8008BCD8; // type:func  note pitch out of range and negative pitch debugs, has concat44 
Audio2_SetPitch_2                          = 0x8008BE18; // type:func  note similar to SetPitch above
Audio2_8008bf58_eightliner                 = 0x8008BF58; // type:func
Audio2_8008c014_tenliner                   = 0x8008C014; // type:func
Audio2_8008c0e0_oneliner_arg0_math         = 0x8008C0E0; // type:func  note returns int
Audio2_8008c104_oneliner_arg0_math_2       = 0x8008C104; // type:func  note returns int
Audio2_8008c130_oneliner_arg0_math_3       = 0x8008C130; // type:func  note returns int
Audio2_SFX_Debug_Print                     = 0x8008C15C; // type:func  note the debugs will allow us to name arg0 struct elements loopBegin, loopEnd, sampleLen, sampleID

//      - {start: 0x052570, type: asm, vram: 0x8008C2F0, name: ultralib/audio/env}
//      - {start: 0x0539F0, type: asm, vram: 0x8008D770, name: ultralib/audio/load_}
//      - {start: 0x054820, type: asm, vram: 0x8008E5A0, name: ultralib/audio/synsetvol}
//      - {start: 0x054910, type: asm, vram: 0x8008E690, name: ultralib/audio/synthesizer}


//     - {start: 0x069580, type:   c, vram: 0x800A3300, name: newtetris/contq}
FUN_069580_800A3300_nineliner_mod300         = 0x800A3300; // type:func
func_800A33E4                                = 0x800A33E4; // type:func
func_800A3460                                = 0x800A3460; // type:func
FUN_069580_800A34A8_tenliner_allocs_heap     = 0x800A34A8; // type:func  note init contpad buttons and something else (8 * 300)
func_800A352C                                = 0x800A352C; // type:func
func_800A3534                                = 0x800A3534; // type:func

// newtetris/06FFD0, vram: 0x800A9D50
func_800A9E44                          = 0x800A9E44; // type:func

// newtetris/072080, vram: 0x800ABE00
func_800AC06C                          = 0x800AC06C; // type:func
func_800AC0F8                          = 0x800AC0F8; // type:func

//     - {start: 0x0779F0, type:   c, vram: 0x800B1770, name: newtetris/sprite}
func_800B1770                          = 0x800B1770; // type:func
func_800B1A7C                          = 0x800B1A7C; // type:func


// ===========================================================================
// .data
// ===========================================================================

// - {start: 0x08B810, type: .data, vram: 0x800C5590, name: newtetris/001050}
PWM_Modulate              = 0x800C5590; // type:u8    size:0x1    static
PWM_Width                 = 0x800C5594; // type:u8    size:0x1    static
PWM_Pulse                 = 0x800C5598; // type:u8    size:0x1    static

// - {start: 0x08B820, type: data, vram: 0x800C55A0, name: newtetris/aisquarelist}


// - {start: 0x095FD0, type: .data, vram: 0x800CFD50, name: newtetris/00E440}
screen_1_width            = 0x800CFD50; // type:u32   size:0x4
screen_1_height           = 0x800CFD54; // type:u32   size:0x4
screen_2_width            = 0x800CFD58; // type:u32   size:0x4
screen_2_height           = 0x800CFD5C; // type:u32   size:0x4
screen_3_width            = 0x800CFD60; // type:u32   size:0x4
screen_3_height           = 0x800CFD64; // type:u32   size:0x4
screen_4_width            = 0x800CFD68; // type:u32   size:0x4
screen_4_height           = 0x800CFD6C; // type:u32   size:0x4
D_800CFD70                = 0x800CFD70; // type:u32   size:0xB0   static  [44]
D_800CFE20                = 0x800CFE20; // type:u8    size:0x1    static
D_800CFE24                = 0x800CFE24; // type:u8    size:0x1
D_800CFE28                = 0x800CFE28; // type:u32   size:0x4    unused

// - {start: 0x0960B0, type: .data, vram: 0x800CFE30, name: newtetris/main}
D_800CFE30                = 0x800CFE30; // type:u32   size:0x4    unused
D_800CFE34                = 0x800CFE34; // type:u8    size:0x1
D_800CFE38                = 0x800CFE38; // type:u32   size:0x4    static
D_800CFE3C                = 0x800CFE3C; // type:u32   size:0x4    static
D_800CFE40                = 0x800CFE40; // type:u32   size:0x4    static

// - {start: 0x0960D0, type: data, vram: 0x800CFE50, name: newtetris/010870}

D_800CFED4                = 0x800CFED4; // type:u16   size:0x2

D_800CFEE8                = 0x800CFEE8; // type:u8    size:0x1
D_800CFEEC                = 0x800CFEEC; // type:u32   size:0x4
D_800CFEF0                = 0x800CFEF0; // type:u32   size:0x4

// - {start: 0x096180, type: .data, vram: 0x800CFF00, name: newtetris/game}
D_800CFF00                = 0x800CFF00; // type:u8    size:0x50           [80]
D_800CFF50                = 0x800CFF50; // type:u8    size:0x1

// - {start: 0x0961E0, type: .data, vram: 0x800CFF60, name: newtetris/gamestats}
g_pieceFallAcceleration   = 0x800CFF60; // type:f32   size:0x4

// - {start: 0x0961F0, type: .data, vram: 0x800CFF70, name: newtetris/gamefinish}
color_gray                = 0x800CFF70; //            size:0xC    static  Color
playercount               = 0x800CFF7C; // type:u8    size:0x1
D_800CFF80                = 0x800CFF80; //            size:0x4    static  UnkStruct_21*
D_800CFF84                = 0x800CFF84; //            size:0x4    static  UnkStruct_21*
D_800CFF88                = 0x800CFF88; //            size:0x4    static  UnkStruct_21*

// - {start: 0x096210, type: .data, vram: 0x800CFF90, name: newtetris/color}

// piece colors
g_color_L                 = 0x800CFF90; //            size:0xC            Color
g_color_J                 = 0x800CFF9C; //            size:0xC            Color
g_color_Z                 = 0x800CFFA8; //            size:0xC            Color
g_color_S                 = 0x800CFFB4; //            size:0xC            Color
g_color_T                 = 0x800CFFC0; //            size:0xC            Color
g_color_I                 = 0x800CFFCC; //            size:0xC            Color
g_color_O                 = 0x800CFFD8; //            size:0xC            Color

g_color_silver            = 0x800CFFE4; //            size:0xC            Color
g_color_gold              = 0x800CFFF0; //            size:0xC            Color
g_color_white             = 0x800CFFFC; //            size:0xC            Color
g_color_black             = 0x800D0008; //            size:0xC            Color
g_color_red               = 0x800D0014; //            size:0xC            Color
g_color_metal             = 0x800D0020; //            size:0xC            Color

// - {start: 0x0962B0, type: .data, vram: 0x800D0030, name: newtetris/piecedefs}

// piece definitions
pieceDefinition_L         = 0x800D0030; //            size:0x20   static  PieceDefinition
pieceDefinition_J         = 0x800D0050; //            size:0x20   static  PieceDefinition
pieceDefinition_Z         = 0x800D0070; //            size:0x20   static  PieceDefinition
pieceDefinition_S         = 0x800D0090; //            size:0x20   static  PieceDefinition
pieceDefinition_T         = 0x800D00B0; //            size:0x20   static  PieceDefinition
pieceDefinition_I         = 0x800D00D0; //            size:0x20   static  PieceDefinition
pieceDefinition_O         = 0x800D00F0; //            size:0x20   static  PieceDefinition

// piece definition array
g_pieceDef_ptr_arr        = 0x800D0110; //            size:0x1C           PieceDefinition* [7]

// piece names; L, J, Z, S, T, I, O
piece_names               = 0x800D012C; // type:char  size:0x14   static  [8]

// - {start: 0x0963C0, type: data, vram: 0x800D0140, name: newtetris/01B280}
D_800D0140                = 0x800D0140;

// - {start: 0x0963E0, type: data, vram: 0x800D0160, name: newtetris/01D300}

// - {start: 0x096400, type: data, vram: 0x800D0180, name: newtetris/01D6E0}

// - {start: 0x096420, type: data, vram: 0x800D01A0, name: newtetris/pfgfx}

// - {start: 0x0964E0, type: .data, vram: 0x800D0260, name: newtetris/026900}
// (sin, cos) pairs for rotations 0, 90, 180, 270
g_trig_tbl                = 0x800D0260; //            size:0x20           Trig [4]

// - {start: 0x096520, type: data, vram: 0x800D02A0, name: newtetris/0279C0}

// - {start: 0x096530, type: data, vram: 0x800D02B0, name: newtetris/027BF0}
D_800D02B0                = 0x800D02B0; // type:u8    size:0x1

// - {start: 0x096740, type: .data, vram: 0x800D04C0, name: newtetris/piecehold}
// piecehold 1p and 2p point tables
D_800D04C0                = 0x800D04C0; //            size:0x20           Point [8]
D_800D04E0                = 0x800D04E0; //            size:0x40           Point [8][2]

//- {start: 0x0967A0, type: .data, vram: 0x800D0520, name: newtetris/currentpiece}
curPieceSpawnBasePoint    = 0x800D0520; //            size:0x4    static  Point
D_800D0524                = 0x800D0524; // type:u8    size:0x1    unused

//- {start: 0x0967B0, type: .data, vram: 0x800D0530, name: newtetris/nextpieces}
D_800D0530                = 0x800D0530; //            size:0x4    static  Point
D_800D0534                = 0x800D0534; //            size:0x4    static  Point

//      - {start: 0x0967C0, type: .data, vram: 0x800D0540, name: newtetris/linescan}
D_800D0540                = 0x800D0540; // type:u8    size:0x1

//      - {start: 0x0967D0, type: data, vram: 0x800D0550, name: newtetris/0967D0}
D_800D0550                = 0x800D0550; // type:s32   size:0x4

// - {start: 0x0967E0, type: .data, vram: 0x800D0560, name: newtetris/minos}
D_800D0560                = 0x800D0560; // type:u8   size:0x1     static
D_800D0568                = 0x800D0568; //           size:0x50    static  Gfx [10]


// - {start: 0x096880, type: .data, vram: 0x800D0600, name: newtetris/03A750}
D_800D0600                = 0x800D0600; // type:s32   size:0x4    static

// - {start: 0x096890, type: data, vram: 0x800D0610, name: newtetris/03AC20}


// - {start: 0x099410, type: .data, vram: 0x800D3190, name: newtetris/n64heap}
n64Heap                   = 0x800D3190; //            size:0x4    static  N64Heap*
D_800D3194                = 0x800D3194; // type:u32   size:0x4    unused
n64HeapAllocCumulative    = 0x800D3198; // type:u32   size:0x4    static

// - {start: 0x099470, type: .data, vram: 0x800D31F0, name: newtetris/creditstext}
ptr_s_credits             = 0x800D31F0; // type:char* size:0x4

// - {start: 0x099550, type: .data, vram: 0x800D32D0, name: newtetris/minilzo}
xn                        = 0x800D32D0; // type:u32   size:0x4    static
__lzo_init_done           = 0x800D32D4; // type:s32   size:0x4

// - {start: 0x0995B0, type: .data, vram: 0x800D3330, name: newtetris/credits}
D_800D3330                = 0x800D3330; // type:u32   size:0x4    static

// - {start: 0x0995C0, type: data, vram: 0x800D3340, name: newtetris/0497E0}


// - {start: 0x099B90, type: data, vram: 0x800D3910, name: newtetris/audio}


// - {start: 0x099BC0, type: data, vram: 0x800D3940, name: newtetris/04BFD0}


// ===========================================================================
// .rodata
// ===========================================================================

// - {start: 0x0A1620, type: .rodata, vram: 0x800DB3A0, name: newtetris/001050}


// - {start: 0x0A22E0, type: .rodata, vram: 0x800DC060, name: newtetris/00E440}
R00E440_rodata_0000       = 0x800DC060; // type:char  size:0x6    literal [6]
R00E440_rodata_0008       = 0x800DC068; // type:char  size:0x6    literal [6]
R00E440_rodata_0010       = 0x800DC070; // type:char  size:0x6    literal [6]
R00E440_rodata_0018       = 0x800DC078; // type:char  size:0x6    literal [6]
R00E440_rodata_0020       = 0x800DC080; // type:char  size:0x5    literal [5]
R00E440_rodata_0028       = 0x800DC088; // type:char  size:0x5    literal [5]

// - {start: 0x0A2310, type: .rodata, vram: 0x800DC090, name: newtetris/dbgprntrrl}
dbgprntrrl_rodata_0000    = 0x800DC090; // type:char  size:0xB    literal [11]

// - {start: 0x0A3060, type: rodata, vram: 0x800DCDE0, name: newtetris/playervars}
D_800DCDE0                = 0x800DCDE0; // type:char  size:0x2F   literal [47]
D_800DCE10                = 0x800DCE10; // type:char  size:0x1    literal [1]

// - {start: 0x0A3120, type: .rodata, vram: 0x800DCEA0, name: newtetris/tetris}
tetris_rodata_0000        = 0x800DCEA0; // type:char  size:0xE    literal [14]
tetris_rodata_0010        = 0x800DCEB0; // type:char  size:0x18   literal [24]
tetris_rodata_0028        = 0x800DCEC8; // type:char  size:0xE    literal [14]
tetris_rodata_0038        = 0x800DCED8; // type:char  size:0x11   literal [17]
tetris_rodata_004C        = 0x800DCEEC; // type:char  size:0xE    literal [14]
tetris_rodata_005C        = 0x800DCEFC; // type:char  size:0xD    literal [13]
tetris_rodata_006C        = 0x800DCF0C; // type:char  size:0xE    literal [14]
tetris_rodata_007C        = 0x800DCF1C; // type:char  size:0x11   literal [17]
tetris_rodata_0090        = 0x800DCF30; // type:char  size:0xE    literal [14]
tetris_rodata_00A0        = 0x800DCF40; // type:char  size:0x14   literal [20]
tetris_rodata_00B4        = 0x800DCF54; // type:char  size:0xE    literal [14]
tetris_rodata_00C4        = 0x800DCF64; // type:char  size:0x13   literal [19]
tetris_rodata_00D8        = 0x800DCF78; // type:char  size:0xE    literal [14]
tetris_rodata_00E8        = 0x800DCF88; // type:char  size:0x19   literal [25]
tetris_rodata_0104        = 0x800DCFA4; // type:char  size:0x6    literal [6]
tetris_rodata_010C        = 0x800DCFAC; // type:char  size:0x12   literal [18]
tetris_rodata_0120        = 0x800DCFC0; // type:char  size:0x6    literal [6]
tetris_rodata_0128        = 0x800DCFC8; // type:char  size:0x13   literal [19]
tetris_rodata_013C        = 0x800DCFDC; // type:char  size:0x6    literal [6]
tetris_rodata_0144        = 0x800DCFE4; // type:char  size:0x14   literal [20]
tetris_rodata_0158        = 0x800DCFF8; // type:char  size:0x6    literal [6]
tetris_rodata_0160        = 0x800DD000; // type:char  size:0x11   literal [17]
tetris_rodata_0174        = 0x800DD014; // type:char  size:0x6    literal [6]
tetris_rodata_017C        = 0x800DD01C; // type:char  size:0x12   literal [18]
tetris_rodata_0190        = 0x800DD030; // type:char  size:0x6    literal [6]
tetris_rodata_0198        = 0x800DD038; // type:char  size:0x11   literal [17]
tetris_rodata_01AC        = 0x800DD04C; // type:char  size:0x6    literal [6]
tetris_rodata_01B4        = 0x800DD054; // type:char  size:0x19   literal [25]
tetris_rodata_01D0        = 0x800DD070; // type:char  size:0x6    literal [6]
tetris_rodata_01D8        = 0x800DD078; // type:char  size:0x10   literal [16]
tetris_rodata_01E8        = 0x800DD088; // type:char  size:0x9    literal [9]
tetris_rodata_01F4        = 0x800DD094; // type:char  size:0x9    literal [9]

// - {start: 0x0A3540, type: .rodata, vram: 0x800DD2C0, name: newtetris/026900}
026900_rodata_0000        = 0x800DD2C0; // type:f32   size:0x4    literal

// vram: 0x800DE040, name: newtetris/n64heap
n64heap_rodata_0000       = 0x800DE040; // type:char  size:0x10   literal [16]
n64heap_rodata_0010       = 0x800DE050; // type:char  size:0xE    literal [14]
n64heap_rodata_0020       = 0x800DE060; // type:char  size:0xD    literal [13]
n64heap_rodata_0030       = 0x800DE070; // type:char  size:0x17   literal [23]
n64heap_rodata_0048       = 0x800DE088; // type:char  size:0xF    literal [15]
n64heap_rodata_0058       = 0x800DE098; // type:char  size:0x13   literal [19]
n64heap_rodata_006C       = 0x800DE0AC; // type:char  size:0x13   literal [19]
n64heap_rodata_0080       = 0x800DE0C0; // type:char  size:0x13   literal [19]
n64heap_rodata_0094       = 0x800DE0D4; // type:char  size:0x13   literal [19]
n64heap_rodata_00A8       = 0x800DE0E8; // type:char  size:0x13   literal [19]
n64heap_rodata_00BC       = 0x800DE0FC; // type:char  size:0x13   literal [19]
n64heap_rodata_00D0       = 0x800DE110; // type:char  size:0x17   literal [23]
n64heap_rodata_00E8       = 0x800DE128; // type:char  size:0x1B   literal [27]

// - {start: 0x0A4CB0, type: .rodata, vram: 0x800DEA30, name: newtetris/minilzo}
__lzo_copyright           = 0x800DEA30; // type:char  size:0x4    literal [4]
minilzo_rodata_0004       = 0x800DEA34; // type:char  size:0x5    literal [5]
minilzo_rodata_000C       = 0x800DEA3C; // type:char  size:0xC    literal [12]
minilzo_rodata_0018       = 0x800DEA48; // type:char  size:0x5    literal [5]
minilzo_rodata_0020       = 0x800DEA50; // type:char  size:0xC    literal [12]
minilzo_rodata_002C       = 0x800DEA5C; // type:s32   size:0xC    literal [3]

// - {start: 0x0A6CF0, type: rodata, vram: 0x800E0A70, name: newtetris/06FFD0}
coders                    = 0x800E0A70; // type:char  size:0x6B8


// ===========================================================================
// .bss
// ===========================================================================

// - {type: .bss, vram: 0x800E1F10, name: newtetris/001050}
g_eepromSize              = 0x800E1F10; // type:s32   size:0x4
D_800E1F14                = 0x800E1F14; // type:u8    size:0x4    static  [4]
superThread_ptr           = 0x800E1F18; //            size:0x4    static  SuperThread*

// - {type: bss, vram: 0x800E1F20, name: newtetris/800E1F20}

// - {type: .bss, vram: 0x800E1F30, name: newtetris/0074E0}
D_800E1F30                = 0x800E1F30; //            size:0x4            UnkStruct_6*

// - {type: bss, vram: 0x800E1F40, name: newtetris/008050}

// - {type: bss, vram: 0x800E1F50, name: newtetris/aiplayer}

// - {type: bss, vram: 0x800E1F60, name: newtetris/009A90}

// - {type: bss, vram: 0x800E1F80, name: newtetris/00C680}

// - {type: bss, vram: 0x800E1FA0, name: newtetris/00E440}
draw_buffer               = 0x800E20B0; // type:u16   size:0x2
g_gdl                     = 0x800E20C0; //            size:0x4            Gfx*


// - {type: .bss, vram: 0x801031C0, name: newtetris/main}
thread_1                  = 0x801031C0; //            size:0x1B0  static  OSThread
idleThread                = 0x80103370; //            size:0x1B0  static  OSThread
thread_2                  = 0x80103520; //            size:0x1B0  static  OSThread
bootStack                 = 0x801036D0; // type:u64   size:0x2000         [1024]
thread_1_Stack            = 0x801056D0; // type:u64   size:0x2000 static  [1024]
idleThreadStack           = 0x801076D0; // type:u64   size:0x2000 static  [1024]
thread_2_Stack            = 0x801096D0; // type:u64   size:0x2000 static  [1024]
D_8010B6D0                = 0x8010B6D0; //            size:0x400  static  OSMesg [256]
D_8010BAD0                = 0x8010BAD0; //            size:0x18   static  OSMesgQueue
D_8010BAE8                = 0x8010BAE8; //            size:0x18   static  OSMesgQueue
D_8010BB00                = 0x8010BB00; //            size:0x4    static  OSMesg [1]
D_8010BB08                = 0x8010BB08; //            size:0x18           OSMesgQueue
D_8010BB20                = 0x8010BB20; //            size:0x80   static  OSMesg [32]
scheduler                 = 0x8010BBA0; //            size:0x284          OSSched
schedulerStack            = 0x8010BE28; // type:u64   size:0x2000 static  [1024]
D_8010DE28                = 0x8010DE28; //            size:0x8    static  OSScClient
controller_queues         = 0x8010DE30; //            size:0x10   static  ControllerQueue* [4]
superThread               = 0x8010DE40; //            size:0x2618         SuperThread
D_80110458                = 0x80110458; //            size:0x100  static  OSMesg [64]
D_80110558                = 0x80110558; //            size:0x18   static  OSMesgQueue

// - {type: .bss, vram: 0x80110570, name: newtetris/dbgprntrrl}
D_80110570                = 0x80110570; // type:u32   size:0x4    unused


//
D_801109F0                = 0x801109F0; // type:u8    size:0x1
D_801109F4                = 0x801109F4; // type:u32   size:0x4

// - {type: .bss, vram: 0x80110A00, name: newtetris/game}
g_game                    = 0x80110A00; //            size:0xE510         Game

// - {type: .bss, vram: 0x8011EF10, name: newtetris/gamestats}
g_gameStats_ptr           = 0x8011EF10; //            size:0x4            GameStats*

// - {type: .bss, vram: 0x8011EF20, name: newtetris/gamevars}
g_playercount             = 0x8011EF20; // type:u8    size:0x1
g_currentplayer           = 0x8011EF21; // type:u8    size:0x1

// - {type: .bss, vram: 0x8011EF30, name: newtetris/playervars}
g_PV_arr                  = 0x8011EF30; //            size:0x2E0          PlayerVars [4]
g_PV_ptr                  = 0x8011F210; //            size:0x4            PlayerVars*

// - {type: .bss, vram: 0x8011F220, name: newtetris/frameact}
g_frameAct_ptr            = 0x8011F220; //            size:0x4            FrameAct*

// - {type: .bss, vram: 0x8011F230, name: newtetris/tetris}
g_tetris_ptr              = 0x8011F230; //            size:0x4            Tetris*

// - {type: bss, vram: 0x8011F260, name: newtetris/pfgfx}
g_pfGfx_ptr               = 0x8011F260; //            size:0x4            PfGfx*

// - {type: .bss, vram: 0x8011F270, name: newtetris/026900}
// sin lut with 1024 entries
D_8011F270                = 0x8011F270; // type:s16     size:0x800  static  [1024]
D_8011FA70                = 0x8011FA70; // type:u32     size:0x4    static

// - {type: .bss, vram: 0x8011FB70, name: newtetris/currentpiece}
g_currentPiece_ptr        = 0x8011FB70; //            size:0x4            CurrentPiece*

// - {type: .bss, vram: 0x8011FB80, name: newtetris/nextpieces}
g_nextPieces_ptr          = 0x8011FB80; //            size:0x4            NextPieces*

// - {type: .bss, vram: 0x8011FB90, name: newtetris/linescan}
g_lineScan_ptr            = 0x8011FB90; //            size:0x4            LineScan*

// - {type: bss, vram: 0x8011FBA0, name: newtetris/multisquare}
D_8011FBA0                = 0x8011FBA0; //            size:0x4            UnkStruct_12*

// - {type: bss, vram: 0x8011FBB0, name: newtetris/multisquareglow}
D_8011FBB0                = 0x8011FBB0; //            size:0x4            struct?*

// - {type: bss, vram: 0x8011FBC0, name: newtetris/keyspin}
D_8011FBC0                = 0x8011FBC0; //            size:0x4            UnkStruct_9*

// - {type: .bss, vram: 0x8011FBD0, name: newtetris/boardpieces}
g_boardPieces_ptr         = 0x8011FBD0; //            size:0x4            BoardPieces*

// - {type: .bss, vram: 0x8011FBE0, name: newtetris/cube}
g_next_cell_id_ptr        = 0x8011FBE0; //            size:0x4            u8*

// - {type: .bss, vram: 0x8011FBF0, name: newtetris/mobilecubes}
g_mobileCubes_ptr         = 0x8011FBF0; //            size:0x4            MobileCubes*

// - {type: .bss, vram: 0x8011FC00, name: newtetris/fallingcubes}
g_fallingCubes_ptr        = 0x8011FC00; //            size:0x4            FallingCubes*

// - {type: bss, vram: 0x8011FC10, name: newtetris/minos}
D_8011FC10                = 0x8011FC10; //            size:0x4            UnkStruct_0*
D_8011FC14                = 0x8011FC14; // type:s32   size:0x4    unused
D_8011FC18                = 0x8011FC18; //            size:0x3B   static  UnkStruct_22
D_8011FC54                = 0x8011FC54; // type:u8    size:0x1    static

// - {type: bss, vram: 0x8011FC60, name: newtetris/8011FC60}


// - {type: bss, vram: 0x8011FC70, name: newtetris/landfill}
g_landfill_ptr            = 0x8011FC70; //            size:0x4            Landfill*

// - {type: bss, vram: 0x8011FC80, name: newtetris/garbage}
g_garbage_ptr             = 0x8011FC80; //            size:0x4            Garbage*

// - {type: .bss, vram: 0x8011FCA0, name: newtetris/03A750}
D_8011FCA0                = 0x8011FCA0; // type:s32   size:0x4    static
D_8011FCA4                = 0x8011FCA4; // type:s32   size:0x4    static
D_8011FCA8                = 0x8011FCA8; // type:s32   size:0x4    static
D_8011FCAC                = 0x8011FCAC; // type:s32   size:0x4    static

// - {type: bss, vram: 0x8011FCB0, name: newtetris/cubetiles}
g_cubeTiles_ptr           = 0x8011FCB0; //            size:0x4            CubeTiles*

// - {type: bss, vram: 0x8011FCF0, name: newtetris/sram}
g_sram_ptr                = 0x8011FCF0; //            size:0x4            Sram*

// - {type: .bss, vram: 0x801201D0, name: newtetris/n64heap}
n64HeapStart              = 0x801201D0; //            size:0x4    static  u8*
n64HeapEnd                = 0x801201D4; //            size:0x4    static  u8*


// - {type: .bss, vram: 0x80120230, name: newtetris/minilzo}
x                         = 0x80120230; // type:s32   size:0xC    static  [3]

// - {type: .bss, vram: 0x80120240, name: newtetris/credits}


// - {type: bss, vram: 0x801203D0, name: newtetris/0497E0}


// - {type: bss, vram: 0x80120A70, name: newtetris/audio}
D_80120A70                = 0x80120A70; //            size:0x4            OSMesg

D_80122010                = 0x80122010; //            size:0x4            OSMesg

D_801235B0                = 0x801235B0; //            size:0x4            OSMesg


// - {type: bss, vram: 0x80128AB0, name: newtetris/04BFD0}


// ===========================================================================
// something other
// ===========================================================================

rspbootTextStart              = 0x800C3310; // name_end:rspbootTextEnd
gspF3DEX2_NoN_fifoTextStart   = 0x800C33E0; // name_end:gspF3DEX2_NoN_fifoTextEnd
gspF3DEX2_NoN_fifoDataStart   = 0x800E1830; // name_end:gspF3DEX2_NoN_fifoDataEnd
aspMainTextStart              = 0x800C4770; // name_end:aspMainTextEnd
aspMainDataStart              = 0x800E1C50; // name_end:aspMainDataEnd

//main_TEXT_START               = 0x8003ADD0; // defined:true
//main_TEXT_END                 = 0x800C5590; // defined:true
//main_BSS_END                  = 0x8012F7D0; // defined:true

audioheap_BASE                = 0x8034AD00;

// newtetris/cfb
// u16 cfb[2][400 * 300];
cfb                       = 0x8038AD00; // type:u16   size:0x75300        [2][120000]
